{"version":3,"sources":["paypal.png","PlayerList.js","PlayerLists.js","Warnings.js","TimmiesApp.js","Legend.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerList","columns","data","useTable","initialState","sortBy","id","desc","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","PlayerLists","props","state","showList","clickHeader","bind","this","playerLists","length","setState","newShowList","show","set","href","onClick","e","Collapse","in","players","playerListColumns","Component","Warnings","playerInjuries","postponedGamesWarning","postponedGames","game","teams","away","team","name","home","gamePK","injuries","injury","player","status","ID","TimmiesApp","timmiesAuthUrl","zorbaneProxyUrl","bridgedUrl","timmiesUrl","refreshToken","loading","games","errorMessage","currentSeason","currentSeasonFormatted","actualSeason","seasonType","currentView","trendGames","trendGamesInput","webInjuries","bearerToken","test","getBearerToken","loadTimmies","loadSetData","loadInjuryData","loadTeamData","getPlayerOpponent","getTeamAbbreviation","getTimmiesAbbreviation","setOverallColumns","setTrendColumns","setTrendGames","adjustTrendGames","getLowerTrendGamesPlayed","getTOIFromPastGames","getValueFromPastGames","getGoalStreak","setCurrentView","setSeasonType","setSeason","axios","post","then","response","AuthenticationResult","IdToken","catch","error","console","log","getPastebinBearer","create","baseURL","withCredentials","get","teamLink","teamData","fullName","teamFullName","abbr","timmiesAbbr","teamAbbr","method","loadNHLGames","timmiesData","timmiesGames","firstTimmiesGame","gameStartTime","Date","startTime","setHours","getHours","date","toISOString","slice","dates","filter","detailedState","sets","firstName","trim","lastName","jsonPlayer","playerNames","find","playerName","timmiesName","basicSearchLink","basicData","key","playerId","playerData","shortName","substring","position","nhldata","teamAbbrevs","opponent","goalsAgainstPerGame","newPlayerLists","playerList","playerIdLink","playerStatsData","people","seasonStats","stats","splits","stat","playerDataTeam","currentTeam","includes","abbreviation","gameLogLink","gameLogSplits","goalsPerGame","goals","gamesPlayed","toFixed","shotsPerGame","shots","statsdata","gamelogData","p","newInjuryList","selectedTeam","timmiesAbbreviation","playerTeamAbbr","playerTeam","skaterFullName","Header","accessor","Cell","src","original","target","value","field","numGames","returnValue","maxGames","gameStats","parseInt","minutes","seconds","toiSplit","split","gameMinutes","gameSeconds","trendSeconds","finalMinutes","finalSeconds","Math","floor","toString","padStart","view","number","newTrendGames","newValue","Number","isInteger","season","seasonFormatted","display","alt","trendSettings","warnings","Button","variant","onChange","Dropdown","Toggle","Menu","Item","Legend","showLegend","App","showMessage","message","rel","integrity","crossOrigin","paypallogo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.813c2d49.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/paypal.1bdbe2bb.png\";","import React, { Component } from 'react'\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\n\r\nexport default function PlayerList({ columns, data }) {\r\n\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState:\r\n            {\r\n                sortBy: [\r\n                    {\r\n                        id: \"playerGoalsPerGame\",\r\n                        desc: true,\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        useSortBy\r\n    );\r\n\r\n\r\n\r\n    return(\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                className={\r\n                                    column.isSorted\r\n                                        ? column.isSortedDesc\r\n                                            ? \"sort-desc\"\r\n                                            : \"sort-asc\"\r\n                                        : \"\"\r\n                                }\r\n                            >{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps([{className: cell.column.className}])}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport { Collapse } from 'react-bootstrap'\r\nimport PlayerList from './PlayerList'\r\n\r\nclass PlayerLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showList: [],\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //initialize the showList array\r\n        let showList = [];\r\n        for (let i = 0; i < this.props.playerLists.length; i++) {\r\n            showList = [...showList, true];\r\n        }\r\n\r\n        this.setState({ showList });\r\n    }\r\n\r\n    clickHeader(id) {\r\n        //shallow copy of entire array\r\n        let newShowList = [...this.state.showList];\r\n        let show = newShowList[id - 1];\r\n        newShowList[id - 1] = !show;\r\n        this.setState({ showList : newShowList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {\r\n\r\n                        this.props.playerLists.map((set) => {\r\n                            return (\r\n                                <div className=\"player-list\" key={set.id}>\r\n                                    <h2 className='list-header' ><a href={\"#set\" + set.id} onClick={(e) => this.clickHeader(set.id)}>List {set.id}</a></h2>\r\n                                    <Collapse in={this.state.showList[set.id - 1]}>\r\n                                        <div className='stats-list' id={\"#set\" + set.id}>\r\n                                            <PlayerList data={set.players} columns={this.props.playerListColumns}/>\r\n                                        </div>\r\n                                    </Collapse>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default PlayerLists;","import React, { Component } from 'react'\r\n\r\nexport default function Warnings(props) {\r\n\r\n    const postponedGamesWarning = props.postponedGames.map((game) =>\r\n        <div key={game.gamePK}>\r\n            POSTPONED: {game.teams.away.team.name} vs {game.teams.home.team.name}\r\n        </div>\r\n    )\r\n\r\n    let playerInjuries;\r\n    if (props.injuries) {\r\n        playerInjuries = props.injuries.map((injury) => \r\n            <div key={injury.ID}>\r\n                INJURY: {injury.player} - {injury.status} - {injury.injury}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"warnings\">\r\n            {postponedGamesWarning}\r\n            {playerInjuries}\r\n        </div>\r\n        )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport PlayerLists from './PlayerLists'\r\nimport Warnings from './Warnings';\r\nimport teamData from './data/teams.json'\r\nimport playerNames from './data/playerNames.json'\r\nimport axios from 'axios'\r\nimport { Button, Dropdown } from 'react-bootstrap'\r\n\r\nclass TimmiesApp extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }],\r\n            games: null,\r\n            teams : [],\r\n            errorMessage: \"\",\r\n            currentSeason: \"20202021\",\r\n            currentSeasonFormatted: \"2020-2021\",\r\n            actualSeason: \"20212022\",\r\n            seasonType: \"regular\",\r\n            currentView: \"overall\",\r\n            trendGames: 5,\r\n            trendGamesInput : 5,\r\n            playerListColumns: null,\r\n            postponedGames : null,\r\n            playerInjuries: [],\r\n            webInjuries: null,\r\n            bearerToken: \"\",\r\n            test: \"eyJraWQiOiI2MkY1WVArTnZlZVFaVkhjak50bGh1UmJmU3R3bEhYTnNBMlo0TEVIZnd3PSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0Yzk2NWRjYS1hYTk1LTQzZDUtYTdmZS1jNDc2NDFmN2M1MDgiLCJhdWQiOiIzZm10bm9rbXB0cTRsM3E3cGZoYW00bzJmbiIsImV2ZW50X2lkIjoiZDAzODdhYTQtY2ZlMS00NDlkLTkwYWYtYzc5ZGJkODg1MGI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MzQ1MzI2NDQsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX2RXTGRvenhGeiIsImNvZ25pdG86dXNlcm5hbWUiOiI0Yzk2NWRjYS1hYTk1LTQzZDUtYTdmZS1jNDc2NDFmN2M1MDgiLCJleHAiOjE2MzQ1MzYyNDUsImlhdCI6MTYzNDUzMjY0NSwiZW1haWwiOiJ6b3JiYW5lQGdtYWlsLmNvbSJ9.EtAG4kIvllRnW6g_vcvsMlP50dckyfawV4DWIXtsa6RC9XMXYPjHW7_A-NyVPXf_kbdszzSrB0-uLEgLJ4iE3a_GqgK8lEjNZwTXEr6sBY5LRDhURqudfItQWLi7Zs3GveMEBaXRdyoFfYIxBMahhoQxKB3td4BR8TYRQqPWjAeqqKsfIhucMbNyrfkJc0AJKKwAa65SWHR51ulnjNVL9HlwPehb758ksbJd_SYjOf0eP9Dj71BMQOz1nTU5apHZAhf26xDTEbi4XIpD8Uy7MAp45JjIxzcVX-TV1yEh8sKf1myQR-lX4Vl1wuN66_Vtpw2BRNhFbaKymKwD2WxpNQ\",\r\n        }\r\n\r\n        this.getBearerToken = this.getBearerToken.bind(this);\r\n        //this.getPastebinBearer = this.getPastebinBearer.bind(this);\r\n        this.loadTimmies = this.loadTimmies.bind(this);\r\n        this.loadSetData = this.loadSetData.bind(this);\r\n        this.loadInjuryData = this.loadInjuryData.bind(this);\r\n        this.loadTeamData = this.loadTeamData.bind(this);\r\n\r\n        this.getPlayerOpponent = this.getPlayerOpponent.bind(this);\r\n        this.getTeamAbbreviation = this.getTeamAbbreviation.bind(this);\r\n        this.getTimmiesAbbreviation = this.getTimmiesAbbreviation.bind(this);\r\n\r\n        this.setOverallColumns = this.setOverallColumns.bind(this);\r\n        this.setTrendColumns = this.setTrendColumns.bind(this);\r\n        this.setTrendGames = this.setTrendGames.bind(this);\r\n\r\n        this.adjustTrendGames = this.adjustTrendGames.bind(this);\r\n        this.getLowerTrendGamesPlayed = this.getLowerTrendGamesPlayed.bind(this);\r\n        this.getTOIFromPastGames = this.getTOIFromPastGames.bind(this);\r\n        this.getValueFromPastGames = this.getValueFromPastGames.bind(this);\r\n        this.getGoalStreak = this.getGoalStreak.bind(this);\r\n\r\n        this.setCurrentView = this.setCurrentView.bind(this);\r\n        this.setSeasonType = this.setSeasonType.bind(this);\r\n        this.setSeason = this.setSeason.bind(this);\r\n\r\n    }\r\n\r\n    timmiesAuthUrl = \"https://cognito-idp.us-east-1.amazonaws.com/\";\r\n    zorbaneProxyUrl = \"https://proxy-zorbane.herokuapp.com/\";\r\n    bridgedUrl = \"https://cors.bridged.cc/\";\r\n    timmiesUrl = \"https://px-api.rbi.digital/hockeyprod/picks\";    \r\n    refreshToken = \"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.CjgbIYfa_cu2jGKvSG-6JL9AlzlLi0T8XwnwYtkY4uViiqSrTupwTGRaZy7_0-a9La4V4vxRsW4GwJYm_Ke_8p4y1x3bwrkihQxLniOz5tu-Mo9gkpE-mDALpkb9d8KocL04aHCMBDY-KhIQqBIqPf9EsDNY5sb2H6U5sQuILXVKcgbgZp3UE6INix7kKJAEUZ6U9evI_2ag_J_Staj8WQColWX2PJuWIe-DckB0isd6MP2acaC5C3nRUc-YCV8rOlzt-VQvtRstvQhBMVvgsAzJ8LAzumQUvPuV2yS4ESDuxE18UZTYn3LVuHLK0J7qWz1XorIH6VgD1XFeSDHEDw.llJyOnu20ar3zQCo.U_-qRLsDPmFH7t_TJkqmCiBhqXuUAYexL0zrukNOLG_hCmcoIaSbjCVO22u204u2APjPhA2Bk94qgnwfho4Za3ozlPXZk8j-T_rZiKOqX05U2uJTnSoKgb5rLQnuVmtISxL77DiIwIR-SbgJ_Me6iz6Yeztge6DEY6CmTwJUlX30zuQMbT-Fe4vzUUico1ah1SqbqS0TqOVPYFsULXrZgQHeZ9Pe5xsg9E1cdEqLWjZ5YbWjuRXWEqN3ODbz0XE_sfQbKQx9k7asziUubcNAuwH827Wc2z9hCjJhUqzv9K1pLbYkUhZ9oAQ4kt2CnObDFgFMEwXqwYNyCVWRe-6i1fvrhYhTN0Nxm7D6eQTm_3nPasP-_GeZN5RbF49B9j9yz7EPxH03E38qBazNxoR5TPUdrFf4HvWdQ7UVn2LWwURlN58pm0w_NZa0r9SWvQTEGNdsdUumW2ZL4r-IOenCRFPVP_wTnS0w2773vOwk66VnxttMYO8rcprz6cWp5vHfet5C7ISgAWMQyFQEi15bQUuWZxhIohIyCxibnEOHOQwwvb2rzPipWrH8LzVf5MJaSQHYy_sMGFnKim-IbL1BcQIchs2oUh6O9TG1eLjp-7QIcvjFBfX4g9mfuKBbnlyy5nLKVkTGp17yYDVomkHQzLwqBktXW57B3W41GnqPMafxqQ7eNB9FPIvM-U5hIdIHkJVLvSxFsuXnLXwvGqI8zUyAOXgO7hxFlldRNC_9DggqSVnIbTQ0dAQUN_aQu0bB1vRmQK4nwo9M0k21ruadviQnlzzh2zJufA4_zaX4-pW4CdPXtyN8t9fbyZLcgBaMvdfp84v5_pH4xaP34ueMEdouYGjhDCnUeXksuh_9sMX1M4TzcC6BoGywsw9EKfKL83CtzcQUh-esJGkniD_-kVjbWVkiVhocVBg7VOcVs7dG7VfooJCkKXN-h0WPbCYoxhPf9qeAPe_xG8U2IqNOxbNgpOBsKwMcvrXPmQFXFUPlBKDAmqMEAblAg5K8IHkh-qJAWHbavUWpDhuYFz_NJBKbw4LxvHMPrDEr8LH0VkphSxZdadqzmw2L_A2SYw_tooEgY-D7gNNDf6wNYIbk2N54VPm0NYBZ0UXvLcQOIFPBTD-fDsuyRrioi4d0kMMg0BlKrprt3BoIYYUJbmvaRVldQ04gzUlUS2TtFQRZzhU0b-iqvi_NMK1vBTc39rjodK8VfFL-I_a0sDvEjj_9tdkeCd4tdXXB9FGtcMBQ7XSxI92MPTumbvpGw41CjXfQz0j_1DeFW3sL5hlESRBU_u27JLok-mrk_KACtTO73XuXlZD7hA5Zhh66QQ.Uk_qbWs7PfH_J_SlsdwRgw\";\r\n\r\n    componentDidMount() {\r\n        this.setOverallColumns();\r\n        this.getBearerToken();\r\n    }\r\n\r\n    getBearerToken() {\r\n        const data = { \"ClientId\": \"3fmtnokmptq4l3q7pfham4o2fn\", \"AuthFlow\": \"REFRESH_TOKEN_AUTH\", \"AuthParameters\": { \"REFRESH_TOKEN\": this.refreshToken, \"DEVICE_KEY\": null } };\r\n        const headers = {\r\n            \"accept\": \"*/*\",\r\n            \"accept-language\": \"en-US,en;q=0.9\",\r\n            \"cache-control\": \"max-age=0\",\r\n            \"content-type\": \"application/x-amz-json-1.1\",\r\n            \"x-amz-target\": \"AWSCognitoIdentityProviderService.InitiateAuth\",\r\n            \"x-amz-user-agent\": \"aws-amplify/0.1.x js\"\r\n        };\r\n        const promise = axios.post(\r\n            this.zorbaneProxyUrl + this.timmiesAuthUrl,\r\n            data,\r\n            { headers }\r\n        );\r\n\r\n        promise.then((response) => {\r\n            this.setState({ bearerToken: response.data.AuthenticationResult.IdToken }, this.loadInjuryData());\r\n        })\r\n            .catch((error) => {\r\n                console.log(\"Refresh call failed, use pastebin bearer\");\r\n                this.getPastebinBearer();\r\n            });\r\n    }\r\n\r\n    //getPastebinBearer() {\r\n    //    const bearerGet = axios.create({\r\n    //        baseURL: this.zorbaneProxyUrl + \"https://pastebin.com/raw/VL2VpYjq\",\r\n    //        headers: {\r\n    //            \"pragma\": \"no-cache\",\r\n    //            \"cache-control\": \"no-cache\",\r\n    //            \"expires\" : 0,\r\n    //        }\r\n    //    });\r\n    //    const promise = bearerGet.get();\r\n    //    promise.then((response) => {\r\n    //        this.setState({ bearerToken: response.data },this.loadInjuryData());\r\n    //    })\r\n    //        .catch((error) => {\r\n    //            this.loadInjuryData()\r\n    //        });\r\n    //}\r\n\r\n    loadInjuryData() {\r\n        const injuryGet = axios.create({\r\n            baseURL: this.zorbaneProxyUrl + \"https://www.rotowire.com/hockey/tables/injury-report.php?team=ALL&pos=ALL\",\r\n            withCredentials: false,\r\n            headers: {\r\n                \"X-Requested-With\" : \"*\",\r\n            }\r\n        });\r\n        const promise = injuryGet.get();\r\n        promise.then((response) => {\r\n            this.setState({ webInjuries: response.data }, () => this.loadTeamData());\r\n        })\r\n            .catch((error) => {\r\n                this.loadTeamData()\r\n            });\r\n    }\r\n\r\n\r\n    loadTeamData() {\r\n        let teamLink = this.zorbaneProxyUrl + \"https://api.nhle.com/stats/rest/en/team/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22points%22,%22direction%22:%22DESC%22%7D,%7B%22property%22:%22wins%22,%22direction%22:%22DESC%22%7D%5D&start=0&limit=50&factCayenneExp=gamesPlayed%3E=1&cayenneExp=gameTypeId=\"\r\n        if (this.state.seasonType === \"playoffs\") {\r\n            teamLink +=  \"3\";\r\n        }\r\n        else {\r\n            teamLink += \"2\";\r\n        }\r\n        teamLink += \"%20and%20seasonId%3C=\" + this.state.actualSeason + \"%20and%20seasonId%3E=\" + this.state.actualSeason;\r\n        let instance = axios.create({\r\n            baseURL: teamLink,\r\n            withCredentials: false,\r\n            headers: {\r\n                \"X-Requested-With\": \"*\",\r\n            }\r\n        });\r\n        const promise = instance.get();\r\n        promise.then((response) => {\r\n\r\n            //go through each team and set it's abbreviation\r\n            let teamData = response.data.data;\r\n            for (let i = 0; i < teamData.length; i++) {\r\n                let fullName = teamData[i].teamFullName;                \r\n                let abbr = this.getTeamAbbreviation(fullName);\r\n                let timmiesAbbr = this.getTimmiesAbbreviation(fullName);\r\n                \r\n                teamData[i].teamAbbr = abbr;\r\n                if (timmiesAbbr) {\r\n                    teamData[i].timmiesAbbr = timmiesAbbr;\r\n                }\r\n                else {\r\n                    teamData[i].timmiesAbbr = abbr;\r\n                }\r\n            }\r\n            //also reset the player list and load timmies\r\n            this.setState({ teams: teamData, playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }] }, this.loadTimmies());\r\n\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(\"Unable to get team stats from NHL website. Error: \" + error)\r\n            this.setState({ errorMessage: \"Sorry!  Unable to load data from the NHL website.  Please try again later.\" });\r\n                });\r\n    }\r\n\r\n    loadTimmies() {\r\n        let timmiesUrl = this.zorbaneProxyUrl + this.timmiesUrl;\r\n        const timmiesGet = axios.create({\r\n            baseURL: timmiesUrl, \r\n            method: \"get\",\r\n            headers: {\r\n                \"pragma\": \"no-cache\",\r\n                \"cache-control\": \"no-cache\",\r\n                \"authorization\": \"Bearer \" + this.state.bearerToken,\r\n                \"accept\": \"application/json, text/plain, */*\",\r\n                \"x-cognito-id\": \"us-east-1:00cc6e37-18ae-4cb7-9e7f-41e0be1924c6\",\r\n                \"accept-language\": \"en-CA,en;q=0.9\"\r\n            }\r\n        });\r\n        const promise = timmiesGet.get();\r\n        promise.then((response) => {\r\n            this.loadNHLGames(response.data);\r\n        })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                this.setState({ errorMessage: \"Sorry!  Unable to load Tims Hockey Challenge Data.  Please try again later.\" });\r\n            });\r\n    }\r\n\r\n    loadNHLGames(timmiesData) {\r\n\r\n        let timmiesGames = timmiesData.games;\r\n\r\n        if (timmiesGames.length > 0) {\r\n            let firstTimmiesGame = timmiesGames[0];\r\n            let gameStartTime = new Date(firstTimmiesGame.startTime);\r\n            gameStartTime.setHours(gameStartTime.getHours() - 7); //pacific time\r\n            //let date = gameStartTime.substring(0, gameStartTime.indexOf(\"T\"));\r\n            //let date = gameStartTime.getFullYear() + \"-\" + gameStartTime.get().toString().padStart(2, \"0\") + \"-\" + gameStartTime.getDay().toString().padStart(2, \"0\");\r\n            let date = gameStartTime.toISOString().slice(0, 10);\r\n            const nhlGamesGet = axios.create({\r\n                baseURL: this.zorbaneProxyUrl + \"https://statsapi.web.nhl.com/api/v1/schedule?date=\" + date,\r\n                withCredentials: false,\r\n                headers: {\r\n                    \"X-Requested-With\": \"*\",\r\n                }\r\n            });\r\n            const nhlGamespromise = nhlGamesGet.get();\r\n            nhlGamespromise.then((response) => {\r\n\r\n                //go through and check if there are postponed games\r\n                const games = response.data.dates[0].games;\r\n                let postponedGames = games.filter(game => game.status.detailedState === \"Postponed\");\r\n               \r\n\r\n                this.setState({ loading: false, games: games, postponedGames : postponedGames }, ()=> this.loadSetData(timmiesData.sets));\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    this.setState({ errorMessage: \"Sorry!  Unable to load game day schedule from NHL website.  Please try again later.\" });\r\n                });\r\n        }\r\n        else {\r\n            this.setState({ errorMessage: \"No games today!\" });\r\n        }\r\n    }\r\n\r\n    //this is where all the players data gets loaded through multiple requests\r\n    loadSetData(sets) {\r\n        //empty out the players\r\n        sets.map((set) => {\r\n            set.players.map((player) => {\r\n                //we want to see if we can find the player in the player.json table which means the tims name and nhl name do not match\r\n                let firstName = player.firstName.trim();\r\n                let lastName = player.lastName.trim();\r\n                let fullName = firstName + \" \" + lastName;\r\n                let jsonPlayer = playerNames.players.find(playerName => playerName.timmiesName === fullName);\r\n                if (jsonPlayer) {\r\n                    firstName = jsonPlayer.firstName;\r\n                    lastName = jsonPlayer.lastName;\r\n                    console.log(\"Found timmies player \" + fullName + \". Renamed to \" + firstName + \" \" + lastName);\r\n                }\r\n\r\n\r\n\r\n\r\n                //get basic nhl data\r\n                let basicSearchLink = this.zorbaneProxyUrl + \"https://api.nhle.com/stats/rest/en/skater/summary?cayenneExp=gameTypeId=\";\r\n                if (this.state.seasonType === \"playoffs\") {\r\n                    basicSearchLink += \"3\";                    \r\n                }\r\n                else {\r\n                    basicSearchLink += \"2\";\r\n                }\r\n                basicSearchLink += \"%20and%20seasonId%3C=\" + this.state.currentSeason + \"%20and%20seasonId%3E=\" + this.state.currentSeason + \"%20and%20skaterFullName%20likeIgnoreCase%20%22%25\" + firstName + \"%20\" + lastName + \"%25%22\";\r\n                let basicSearch = axios.create({\r\n                    baseURL: basicSearchLink,\r\n                    withCredentials: false,\r\n                    headers: {\r\n                        \"X-Requested-With\": \"*\",\r\n                    }\r\n                });\r\n                const basicPromise = basicSearch.get();\r\n                basicPromise.then((response) => {\r\n                    const basicData = response.data.data[0];\r\n                    let key = player.firstName + player.lastName;\r\n                    if (basicData) {\r\n                        key = basicData.playerId;\r\n                    }\r\n                    else {\r\n                        //if we can't find the nhl player just add it but with placeholder fake data\r\n                        let fakenhldata = { teamAbbrevs: \"nhl\" }\r\n                        let fakeopponent = { teamAbbr : \"nhl\", goalsAgainstPerGame : 0}\r\n                        let playerData = { firstName: player.firstName, lastName: player.lastName, shortName: firstName.substring(0, 1) + \". \" + lastName, position: player.position, key: key, nhldata : fakenhldata, opponent : fakeopponent};\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n                    }\r\n\r\n\r\n                    let playerIdLink = this.zorbaneProxyUrl + \"https://statsapi.web.nhl.com/api/v1/people/\";\r\n                    playerIdLink = playerIdLink + key;\r\n                    playerIdLink = playerIdLink + \"?expand=person.stats&stats=\";\r\n                    if (this.state.seasonType === \"playoffs\") {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeasonPlayoffs\";\r\n                    }\r\n                    else {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeason\";\r\n                    }\r\n                    playerIdLink = playerIdLink + \"&season=\" + this.state.currentSeason;\r\n\r\n                    let playerSearch = axios.create({\r\n                        baseURL: playerIdLink,\r\n                        withCredentials: false,\r\n                        headers: {\r\n                        }\r\n                    });\r\n\r\n                    const playerSearchPromise = playerSearch.get();\r\n                    playerSearchPromise.then((response) => {\r\n                        let playerStatsData = response.data.people[0];\r\n\r\n                        //get the correct stats from the playerStats and that is a new object in player\r\n                        let seasonStats = playerStatsData.stats[0].splits[0].stat;\r\n\r\n\r\n                        let playerDataTeam = playerStatsData.currentTeam.name;\r\n                        //montreal canadiens has an accent, problem finding it in the json\r\n                        if (playerDataTeam.includes(\"Canadiens\")) {\r\n                            playerDataTeam = \"Montreal Canadiens\";\r\n                        }\r\n\r\n                        let team = teamData.teams.find(team => team.fullName === playerDataTeam);\r\n                        if (team != null) {\r\n                            //change the player's team to the current team based on playerstats data (that is more accurate than the summary search)\r\n                            basicData.teamAbbrevs = team.abbreviation;\r\n                        }\r\n                        else {\r\n                            console.log(\"Could not find team \" + playerDataTeam);\r\n                        }\r\n                        \r\n\r\n                        //game log search\r\n                        let gameLogLink = this.zorbaneProxyUrl + \"https://statsapi.web.nhl.com/api/v1/people/\"\r\n                        gameLogLink += key;\r\n                        gameLogLink += \"/stats?stats=\";\r\n                        if (this.state.seasonType === \"playoffs\") {\r\n                            gameLogLink += \"playoffGameLog\"\r\n                        }\r\n                        else {\r\n                            gameLogLink += \"gameLog\";\r\n                        }\r\n                        gameLogLink += \"&expand=stats.team & season=\";\r\n                        gameLogLink += this.state.currentSeason;\r\n                        let gameLogSearch = axios.create({\r\n                            baseURL: gameLogLink,\r\n                            withCredentials: false,\r\n                            headers: {\r\n                                \"X-Requested-With\": \"*\",\r\n                            }\r\n                        });\r\n\r\n                        const gameLogPromise = gameLogSearch.get();\r\n                        gameLogPromise.then((response) => {\r\n                            let gameLogSplits = response.data.stats[0].splits;\r\n\r\n                            //formatted/custom data\r\n                            //get the opponent from the team list\r\n                            let opponent = null;\r\n                            if (basicData) {\r\n                                opponent = this.getPlayerOpponent(basicData);\r\n                            }\r\n\r\n                            //add goalsPerGame and shotsPerGame to basic data\r\n                            basicData.goalsPerGame = (basicData.goals / basicData.gamesPlayed).toFixed(2);\r\n                            basicData.shotsPerGame = (basicData.shots / basicData.gamesPlayed).toFixed(2);\r\n                            player.fullName = fullName;\r\n                            player.shortName = firstName.substring(0, 1) + \" \" + lastName;\r\n\r\n                            let playerData = {\r\n                                firstName: player.firstName,\r\n                                lastName: player.lastName,\r\n                                fullName: player.firstName + \" \" + player.lastName,\r\n                                shortName: firstName.substring(0, 1) + \". \" + lastName,\r\n                                position: player.position,\r\n                                key: key,\r\n                                id: key,\r\n                                nhldata: basicData,\r\n                                statsdata : seasonStats,\r\n                                gamelogData: gameLogSplits,\r\n                                opponent: opponent,                               \r\n                            };\r\n\r\n                            //shallow copy of entire array\r\n                            let newPlayerLists = [...this.state.playerLists];\r\n                            let playerList = newPlayerLists[set.id - 1];\r\n                            playerList.players = [...playerList.players, playerData]\r\n\r\n                            //see if the player is injured\r\n                            if (this.state.webInjuries && !this.state.playerInjuries.find((p) => p.player === playerData.fullName)) { //it may be null if this call failed and that is OK\r\n                                let injury = this.state.webInjuries.find((injury) => injury.player === playerData.fullName);\r\n                                if (injury) {\r\n                                    playerData.injury = injury;\r\n                                }\r\n                            }\r\n\r\n                            if (playerData.injury) {\r\n                                let newInjuryList = [...this.state.playerInjuries, playerData.injury];\r\n                                this.setState({ playerLists: newPlayerLists, playerInjuries: newInjuryList });\r\n                            }\r\n                            else {\r\n                                this.setState({ playerLists: newPlayerLists });\r\n                            }\r\n                        }).catch((error) => {\r\n                            console.log(\"Game log stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                        });\r\n\r\n                    }).catch((error) => {\r\n                        console.log(\"Player stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                    });\r\n\r\n                }).catch((error) => {\r\n                    console.log(\"Player search didn't work for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error)\r\n                });\r\n            });\r\n        });\r\n    }    \r\n\r\n    getTeamAbbreviation(teamFullName) {      \r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        return selectedTeam ? selectedTeam.abbreviation : \"MTL\"; //if it can't find it, its because of special character in montreal\r\n    }\r\n    \r\n    getTimmiesAbbreviation(teamFullName) {\r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        if (selectedTeam) {\r\n            return selectedTeam.timmiesAbbreviation ? selectedTeam.timmiesAbbreviation : \"\";\r\n        }\r\n    }\r\n\r\n    getPlayerOpponent(basicData) {\r\n        let opponent = null;\r\n        if (basicData) {\r\n            let playerTeamAbbr = basicData.teamAbbrevs;\r\n            let playerTeam = this.state.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n            if (playerTeam) {\r\n\r\n                let game;\r\n                game = this.state.games.find(game => game.teams.home.team.name === playerTeam.teamFullName || game.teams.away.team.name === playerTeam.teamFullName);\r\n                if (game) {\r\n                    if (game.teams.home.team.name === playerTeam.teamFullName) {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.away.team.name);\r\n                    }\r\n                    else {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.home.team.name);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(\"Can't find game for player \" + basicData.skaterFullName);\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Can't find player team for player \" + basicData.skaterFullName + \" Team: \" + playerTeamAbbr);\r\n            }\r\n        }\r\n\r\n        if (!opponent) {\r\n            console.log(\"Failed to get opponent for \" + basicData.skaterFullName);\r\n            opponent = { teamAbbr: \"nhl\", goalsAgainstPerGame: 0 };\r\n        }\r\n        return opponent;\r\n    }\r\n\r\n    setOverallColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"GP\",\r\n                        id: \"playerGames\",\r\n                        accessor: \"nhldata.gamesPlayed\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: \"nhldata.goals\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: \"nhldata.shotsPerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: \"statsdata.powerPlayTimeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: \"statsdata.timeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: \"nhldata.goalsPerGame\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Opp.GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    setTrendColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Games\",\r\n                        id: \"games\",\r\n                        accessor: (row) => this.getLowerTrendGamesPlayed(row, this.state.trendGames),\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: (row) => { return this.getValueFromPastGames(row, \"goals\", this.state.trendGames) },\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"shots\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"long-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"powerPlayTimeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"timeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"goals\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"short-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"Opp.Season GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    getValueFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let returnValue = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames -1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            returnValue += parseInt(gameStats[field]);\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    getTOIFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let minutes = 0;\r\n        let seconds = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames - 1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            let toiValue = gameStats[field];\r\n            let toiSplit = toiValue.split(\":\");\r\n            let gameMinutes = toiSplit[0];\r\n            let gameSeconds = toiSplit[1];\r\n\r\n            minutes += parseInt(gameMinutes);\r\n            seconds += parseInt(gameSeconds);\r\n        }\r\n\r\n        let trendOrGamesPlayed = this.getLowerTrendGamesPlayed(player, numGames);\r\n        let totalSeconds = seconds + (minutes * 60);\r\n        let trendSeconds = totalSeconds / trendOrGamesPlayed;\r\n        let finalMinutes = trendSeconds / 60;\r\n        let finalSeconds = trendSeconds % 60;\r\n\r\n        return Math.floor(finalMinutes) + \":\" + Math.floor(finalSeconds).toString().padStart(2, \"0\");\r\n    }\r\n\r\n    getGoalStreak(player) {\r\n        var gamelog = player.gamelogData;\r\n        var streak = 0;\r\n        \r\n        if (gamelog.length > 0) {\r\n            //check the first one to see if they scored or not.  If they did start at 1, if they didn't be negative 1\r\n        }\r\n\r\n        return streak;\r\n    }\r\n\r\n    getGoalsPerGameVsOpponent(player) {\r\n        var opponent = player.opponent;\r\n        var gamelog = player.gamelogData;\r\n        var goals = 0;\r\n        if (gamelog.length > 0) {\r\n\r\n        }\r\n        return goals;\r\n    }\r\n\r\n    setCurrentView(view) {\r\n        if (view != this.state.currentView) {\r\n            this.setState({ currentView: view }, () => { if (view === \"trend\") this.setTrendColumns(); else this.setOverallColumns() });\r\n        }\r\n    }\r\n\r\n    getLowerTrendGamesPlayed(player, numGames) {\r\n        return numGames < player.nhldata.gamesPlayed ? numGames : player.nhldata.gamesPlayed\r\n    }\r\n\r\n    adjustTrendGames(number) {\r\n        let newTrendGames = parseInt(this.state.trendGames) + parseInt(number);\r\n\r\n        if (newTrendGames > 0) {\r\n            this.setTrendGames(newTrendGames);\r\n        }\r\n    }\r\n\r\n    setTrendGames(number) {\r\n        const newValue = parseInt(number);\r\n\r\n        if (Number.isInteger(newValue)) {\r\n            if (newValue > 0) {\r\n                this.setState({ trendGamesInput: newValue, trendGames: newValue }, () => this.setTrendColumns());\r\n            }\r\n        }\r\n        else {\r\n            //special rule for empty, allow it but it won't set the actual trend games state\r\n            if (number === \"\") {\r\n                this.setState({ trendGamesInput: number });\r\n            }\r\n        }\r\n    }\r\n\r\n    setSeasonType(season) {\r\n        if (season != this.state.seasonType) {\r\n            this.setState({ seasonType: season }, () => this.getBearerToken());\r\n        }\r\n    }\r\n\r\n    setSeason(season) {\r\n        if (season != this.state.currentSeason) {\r\n            let seasonFormatted = season.substring(0, 4) + \"-\" + season.substring(4, 8);\r\n            console.log(\"set season to \" + season + \" and formatted season to\" + seasonFormatted);\r\n            this.setState({ currentSeason: season, currentSeasonFormatted: seasonFormatted }, () => this.getBearerToken());\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let display = <div>ok</div>\r\n\r\n        if (this.state.errorMessage) {\r\n            display = <div className=\"error-message\">{this.state.errorMessage}</div>\r\n        }\r\n        else if (this.state.loading) {\r\n            display = <div><img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"loading...\" /></div>\r\n        }\r\n        else {\r\n            let trendSettings;\r\n            if (this.state.currentView === \"trend\") {\r\n                trendSettings = <div className=\"trend-settings\"><Button variant=\"light\" onClick={() => this.adjustTrendGames(-1)}>-</Button>Last <input className=\"trend-games\" value={this.state.trendGamesInput} onChange={(e) => { this.setTrendGames(e.target.value); }} /> Games<Button variant=\"light\" onClick={() => this.adjustTrendGames(1)}>+</Button></div>\r\n            }\r\n            let warnings;\r\n            if (this.state.postponedGames || this.state.playerInjuries) {\r\n                warnings = <Warnings postponedGames={this.state.postponedGames} injuries={this.state.playerInjuries}/>\r\n            }\r\n            display =\r\n                <div>\r\n                {warnings}\r\n                <div className=\"settings-buttons\"><Button onClick={(e) => this.setSeasonType(\"regular\")} variant={this.state.seasonType === \"regular\" ? \"dark\" : \"light\"}>Regular Season</Button><Button onClick={(e) => this.setSeasonType(\"playoffs\")} variant={this.state.seasonType === \"playoffs\" ? \"dark\" : \"light\"}>Playoffs</Button></div>\r\n                <div>\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"season-dropdown\">\r\n                            {this.state.currentSeasonFormatted}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"season-dropdown\" >\r\n                            <Dropdown.Item onClick={() => this.setSeason(\"20202021\")}> 2020-2021</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.setSeason(\"20212022\")}>2021-2022</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n                <div className=\"settings-buttons\"><Button onClick={(e) => this.setCurrentView(\"overall\")} variant={this.state.currentView === \"overall\" ? \"dark\" : \"light\"}>Overall</Button><Button onClick={(e) => this.setCurrentView(\"trend\")} variant={this.state.currentView === \"trend\" ? \"dark\" : \"light\"}>Trend</Button></div>\r\n                {trendSettings}                \r\n                <PlayerLists playerLists={this.state.playerLists} games={this.state.games} teams={this.state.teams} playerListColumns={this.state.playerListColumns} />\r\n                </div>\r\n        }\r\n        return (display);\r\n    }\r\n}\r\n\r\nexport default TimmiesApp;","import React, { Component } from 'react'\r\nimport { Collapse } from 'react-bootstrap'\r\n\r\nclass Legend extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showLegend: false\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n    clickHeader() {\r\n        this.setState({ showLegend: !this.state.showLegend });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"legend\" id=\"legend\">\r\n                <div onClick={(e) => this.clickHeader()}><a href=\"#legend\">Legend</a></div>\r\n                <Collapse in={this.state.showLegend} >\r\n                    <div className=\"legend-content\">\r\n                        Pos - Position<br />\r\n                        GP - Games Played<br />\r\n                        G - Goals<br />\r\n                        Shots/GP - Shots per Game Played<br />\r\n                        PP.TOI/GP - Power Play Time on Ice per Game Played<br />\r\n                        TOI/GP - Time on Ice per Game Played<br />\r\n                        Goals/GP - Goals per Game Played<br />\r\n                        Opp.GAA - Opposition Goals Against Average<br />\r\n                    </div>\r\n                </Collapse>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Legend;","import './App.css';\r\nimport paypallogo from './paypal.png';\r\nimport Container from 'react-bootstrap/Container'\r\nimport TimmiesApp from './TimmiesApp'\r\nimport Legend from './Legend'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component } from 'react'\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showMessage: true\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n    clickHeader() {\r\n        this.setState({ showMessage: false });\r\n    }\r\n\r\n    render() {\r\n        let message = <div onClick={(e) => this.clickHeader()}><a href=\"#\">App will be unstable for the near while.  Most of the time it will not connect properly and I have to manually fix it.  Refreshing constantly will not help. While it is in this state I will try to have it working at 9am PST/12pm EST-10am PST/1pm EST and 9pm PST/12am EST-10pm PST/1am EST but it depends if I am available or not.  Until the authentication issue is solved this is how it will work but it's still better than not working at all.  Click to hide...</a></div>\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <link\r\n                    rel=\"stylesheet\"\r\n                    href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n                    integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n                    crossOrigin=\"anonymous\"\r\n                />\r\n                <header className=\"app-title\">\r\n                    Tim Horton's Hockey Challenge Helper\r\n          </header>\r\n                <div>\r\n                    {this.state.showMessage && message}\r\n                    <TimmiesApp />\r\n                    <Legend />\r\n                    <footer className=\"footer\" >\r\n                        <div>Questions? Suggestions? Find me on <a href={\"//www.twitter.com/Zorbane\"} target=\"_blank\">Twitter</a></div>\r\n                        <div>Buy me Timmies? <a href='https://www.paypal.com/paypalme/zorbane/' target=\"_blank\"><img className=\"paypal-logo\" src={paypallogo} /></a></div>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}