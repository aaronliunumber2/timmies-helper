{"version":3,"sources":["paypal.png","PlayerList.js","PlayerLists.js","Warnings.js","TimmiesApp.js","Player.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerList","columns","data","useTable","initialState","sortBy","id","desc","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","PlayerLists","props","state","showList","clickHeader","bind","this","playerLists","length","setState","newShowList","show","set","href","onClick","e","Collapse","in","players","playerListColumns","Component","Warnings","playerInjuries","postponedGamesWarning","postponedGames","game","teams","away","team","name","home","gamePK","injuries","injury","player","status","ID","TimmiesApp","loading","games","errorMessage","currentSeason","seasonType","currentView","trendGames","trendGamesInput","webInjuries","loadTimmies","loadSetData","loadInjuryData","loadTeamData","getPlayerOpponent","getTeamAbbreviation","getTimmiesAbbreviation","setOverallColumns","setTrendColumns","setTrendGames","adjustTrendGames","getLowerTrendGamesPlayed","getTOIFromPastGames","getValueFromPastGames","getGoalStreak","setCurrentView","axios","create","baseURL","withCredentials","get","then","response","teamData","fullName","teamFullName","abbr","timmiesAbbr","teamAbbr","catch","error","console","log","post","loadNHLGames","timmiesData","timmiesGames","firstTimmiesGame","gameStartTime","Date","startTime","setHours","getHours","date","toISOString","slice","dates","filter","detailedState","sets","firstName","trim","lastName","jsonPlayer","playerNames","find","playerName","timmiesName","basicSearchLink","basicData","key","playerId","playerData","shortName","substring","position","nhldata","teamAbbrevs","opponent","goalsAgainstPerGame","newPlayerLists","playerList","playerIdLink","playerStatsData","people","seasonStats","stats","splits","stat","playerDataTeam","currentTeam","includes","abbreviation","gameLogLink","gameLogSplits","goalsPerGame","goals","gamesPlayed","toFixed","shotsPerGame","shots","statsdata","gamelogData","newInjuryList","selectedTeam","timmiesAbbreviation","playerTeamAbbr","playerTeam","skaterFullName","view","Header","accessor","Cell","src","original","target","value","field","numGames","returnValue","maxGames","gameStats","parseInt","minutes","seconds","toiSplit","split","gameMinutes","gameSeconds","trendSeconds","finalMinutes","finalSeconds","Math","floor","toString","padStart","number","newTrendGames","newValue","Number","isInteger","display","alt","trendSettings","warnings","Button","variant","onChange","App","rel","integrity","crossOrigin","paypallogo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6432af8d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/paypal.1bdbe2bb.png\";","import React, { Component } from 'react'\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\n\r\nexport default function PlayerList({ columns, data }) {\r\n\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState:\r\n            {\r\n                sortBy: [\r\n                    {\r\n                        id: \"playerGoalsPerGame\",\r\n                        desc: true,\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        useSortBy\r\n    );\r\n\r\n\r\n\r\n    return(\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                className={\r\n                                    column.isSorted\r\n                                        ? column.isSortedDesc\r\n                                            ? \"sort-desc\"\r\n                                            : \"sort-asc\"\r\n                                        : \"\"\r\n                                }\r\n                            >{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps([{className: cell.column.className}])}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport { Collapse } from 'react-bootstrap'\r\nimport PlayerList from './PlayerList'\r\n\r\nclass PlayerLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showList: [],\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //initialize the showList array\r\n        let showList = [];\r\n        for (let i = 0; i < this.props.playerLists.length; i++) {\r\n            showList = [...showList, true];\r\n        }\r\n\r\n        this.setState({ showList });\r\n    }\r\n\r\n    clickHeader(id) {\r\n        //shallow copy of entire array\r\n        let newShowList = [...this.state.showList];\r\n        let show = newShowList[id - 1];\r\n        newShowList[id - 1] = !show;\r\n        this.setState({ showList : newShowList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {\r\n\r\n                        this.props.playerLists.map((set) => {\r\n                            return (\r\n                                <div className=\"player-list\" key={set.id}>\r\n                                    <h2 className='list-header' ><a href={\"#set\" + set.id} onClick={(e) => this.clickHeader(set.id)}>List {set.id}</a></h2>\r\n                                    <Collapse in={this.state.showList[set.id - 1]}>\r\n                                        <div className='stats-list' id={\"#set\" + set.id}>\r\n                                            <PlayerList data={set.players} columns={this.props.playerListColumns}/>\r\n                                        </div>\r\n                                    </Collapse>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default PlayerLists;","import React, { Component } from 'react'\r\n\r\nexport default function Warnings(props) {\r\n\r\n    const postponedGamesWarning = props.postponedGames.map((game) =>\r\n        <div key={game.gamePK}>\r\n            POSTPONED: {game.teams.away.team.name} vs {game.teams.home.team.name}\r\n        </div>\r\n    )\r\n\r\n    let playerInjuries;\r\n    if (props.injuries) {\r\n        playerInjuries = props.injuries.map((injury) => \r\n            <div key={injury.ID}>\r\n                INJURY: {injury.player} - {injury.status} - {injury.injury}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"warnings\">\r\n            {postponedGamesWarning}\r\n            {playerInjuries}\r\n        </div>\r\n        )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport PlayerLists from './PlayerLists'\r\nimport Warnings from './Warnings';\r\nimport teamData from './data/teams.json'\r\nimport playerNames from './data/playerNames.json'\r\nimport axios from 'axios'\r\nimport { Button } from 'react-bootstrap'\r\nimport Player from './Player'\r\n\r\nclass TimmiesApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }],\r\n            games: null,\r\n            teams : [],\r\n            errorMessage: \"\",\r\n            currentSeason: \"20202021\",\r\n            seasonType: \"regular\",\r\n            currentView: \"overall\",\r\n            trendGames: 5,\r\n            trendGamesInput : 5,\r\n            playerListColumns: null,\r\n            postponedGames : null,\r\n            playerInjuries: [],\r\n            webInjuries : null,\r\n        }\r\n\r\n        this.loadTimmies = this.loadTimmies.bind(this);\r\n        this.loadSetData = this.loadSetData.bind(this);\r\n        this.loadInjuryData = this.loadInjuryData.bind(this);\r\n        this.loadTeamData = this.loadTeamData.bind(this);\r\n\r\n        this.getPlayerOpponent = this.getPlayerOpponent.bind(this);\r\n        this.getTeamAbbreviation = this.getTeamAbbreviation.bind(this);\r\n        this.getTimmiesAbbreviation = this.getTimmiesAbbreviation.bind(this);\r\n\r\n        this.setOverallColumns = this.setOverallColumns.bind(this);\r\n        this.setTrendColumns = this.setTrendColumns.bind(this);\r\n        this.setTrendGames = this.setTrendGames.bind(this);\r\n\r\n        this.adjustTrendGames = this.adjustTrendGames.bind(this);\r\n        this.getLowerTrendGamesPlayed = this.getLowerTrendGamesPlayed.bind(this);\r\n        this.getTOIFromPastGames = this.getTOIFromPastGames.bind(this);\r\n        this.getValueFromPastGames = this.getValueFromPastGames.bind(this);\r\n        this.getGoalStreak = this.getGoalStreak.bind(this);\r\n\r\n        this.setCurrentView = this.setCurrentView.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setOverallColumns();\r\n        this.loadTeamData();\r\n    }\r\n\r\n    loadTeamData() {\r\n        let nhlLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/team/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22points%22,%22direction%22:%22DESC%22%7D,%7B%22property%22:%22wins%22,%22direction%22:%22DESC%22%7D%5D&start=0&limit=50&factCayenneExp=gamesPlayed%3E=1&cayenneExp=gameTypeId=2%20and%20seasonId%3C=20202021%20and%20seasonId%3E=20202021\";\r\n        let instance = axios.create({\r\n            baseURL: nhlLink,\r\n            withCredentials: false,\r\n            headers: {\r\n            }\r\n        });\r\n        const promise = instance.get();\r\n        promise.then((response) => {\r\n            //go through each team and set it's abbreviation\r\n            let teamData = response.data.data;\r\n            for (let i = 0; i < teamData.length; i++) {\r\n                let fullName = teamData[i].teamFullName;                \r\n                let abbr = this.getTeamAbbreviation(fullName);\r\n                let timmiesAbbr = this.getTimmiesAbbreviation(fullName);\r\n                \r\n                teamData[i].teamAbbr = abbr;\r\n                if (timmiesAbbr) {\r\n                    teamData[i].timmiesAbbr = timmiesAbbr;\r\n                }\r\n                else {\r\n                    teamData[i].timmiesAbbr = abbr;\r\n                }\r\n            }\r\n            this.setState({ teams: teamData }, this.loadInjuryData());\r\n\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(\"Unable to get team stats from NHL website. Error: \" + error)\r\n            this.setState({ errorMessage: \"Sorry!  Unable to load data from the NHL website.  Please try again later.\" });\r\n                });\r\n    }\r\n\r\n    loadInjuryData() {\r\n        const promise = axios.get(\"https://cors.bridged.cc/https://www.rotowire.com/hockey/tables/injury-report.php?team=ALL&pos=ALL\");\r\n        promise.then((response) => {\r\n            this.setState({ webInjuries: response.data }, this.loadTimmies());\r\n        })\r\n            .catch((error) => {\r\n                this.loadTimmies()\r\n            });\r\n    }\r\n\r\n    loadTimmies() {\r\n        const promise = axios.post(\"https://cors.bridged.cc/http://ec2-54-158-170-220.compute-1.amazonaws.com/api/v1/players\");\r\n        promise.then((response) => {\r\n            this.loadNHLGames(response.data);\r\n        })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                this.setState({ errorMessage: \"Sorry!  Unable to load Tims Hockey Challenge Data.  Please try again later.\" });\r\n            });\r\n    }\r\n\r\n    loadNHLGames(timmiesData) {\r\n\r\n        let timmiesGames = timmiesData.games;\r\n\r\n        if (timmiesGames.length > 0) {\r\n            let firstTimmiesGame = timmiesGames[0];\r\n            let gameStartTime = new Date(firstTimmiesGame.startTime);\r\n            gameStartTime.setHours(gameStartTime.getHours() - 7); //pacific time\r\n            //let date = gameStartTime.substring(0, gameStartTime.indexOf(\"T\"));\r\n            //let date = gameStartTime.getFullYear() + \"-\" + gameStartTime.get().toString().padStart(2, \"0\") + \"-\" + gameStartTime.getDay().toString().padStart(2, \"0\");\r\n            let date = gameStartTime.toISOString().slice(0, 10);\r\n            console.log(\"Date\" + date);\r\n            const nhlGamespromise = axios.get(\"https://cors.bridged.cc/https://statsapi.web.nhl.com/api/v1/schedule?date=\" + date);\r\n            nhlGamespromise.then((response) => {\r\n\r\n                //go through and check if there are postponed games\r\n                const games = response.data.dates[0].games;\r\n                let postponedGames = games.filter(game => game.status.detailedState === \"Postponed\");\r\n               \r\n\r\n                this.setState({ loading: false, games: games, postponedGames : postponedGames }, this.loadSetData(timmiesData.sets));\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    this.setState({ errorMessage: \"Sorry!  Unable to load game day schedule from NHL website.  Please try again later.\" });\r\n                });\r\n        }\r\n        else {\r\n            this.setState({ errorMessage: \"No games today!\" });\r\n        }\r\n    }\r\n\r\n    //this is where all the players data gets loaded through multiple requests\r\n    loadSetData(sets) {\r\n        sets.map((set) => {\r\n            set.players.map((player) => {\r\n                //we want to see if we can find the player in the player.json table which means the tims name and nhl name do not match\r\n                let firstName = player.firstName.trim();\r\n                let lastName = player.lastName.trim();\r\n                let fullName = firstName + \" \" + lastName;\r\n                let jsonPlayer = playerNames.players.find(playerName => playerName.timmiesName === fullName);\r\n                if (jsonPlayer) {\r\n                    firstName = jsonPlayer.firstName;\r\n                    lastName = jsonPlayer.lastName;\r\n                    console.log(\"Found timmies player \" + fullName + \". Renamed to \" + firstName + \" \" + lastName);\r\n                }\r\n\r\n\r\n\r\n\r\n                //get basic nhl data\r\n                let basicSearchLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/skater/summary?cayenneExp=gameTypeId=2%20and%20seasonId%3E=20202021%20and%20skaterFullName%20likeIgnoreCase%20%22%25\" + firstName + \"%20\" + lastName + \"%25%22\";\r\n                let basicSearch = axios.create({\r\n                    baseURL: basicSearchLink,\r\n                    withCredentials: false,\r\n                    headers: {\r\n                    }\r\n                });\r\n                const basicPromise = basicSearch.get();\r\n                basicPromise.then((response) => {\r\n                    const basicData = response.data.data[0];\r\n                    let key = player.firstName + player.lastName;\r\n                    if (basicData) {\r\n                        key = basicData.playerId;\r\n                    }\r\n                    else {\r\n                        //if we can't find the nhl player just add it but with placeholder fake data\r\n                        let fakenhldata = { teamAbbrevs: \"nhl\" }\r\n                        let fakeopponent = { teamAbbr : \"nhl\", goalsAgainstPerGame : 0}\r\n                        let playerData = { firstName: player.firstName, lastName: player.lastName, shortName: firstName.substring(0, 1) + \". \" + lastName, position: player.position, key: key, nhldata : fakenhldata, opponent : fakeopponent};\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n                    }\r\n\r\n\r\n                    let playerIdLink = \"https://cors.bridged.cc/\";\r\n                    playerIdLink = playerIdLink + \"https://statsapi.web.nhl.com/api/v1/people/\";\r\n                    playerIdLink = playerIdLink + key;\r\n                    playerIdLink = playerIdLink + \"?expand=person.stats&stats=\";\r\n                    if (this.state.seasonType === \"regular\") {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeason\";\r\n                    }\r\n                    else {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeasonPlayoffs\";\r\n                    }\r\n                    playerIdLink = playerIdLink + \"&season=\" + this.state.currentSeason;\r\n\r\n                    let playerSearch = axios.create({\r\n                        baseURL: playerIdLink,\r\n                        withCredentials: false,\r\n                        headers: {\r\n                        }\r\n                    });\r\n\r\n                    const playerSearchPromise = playerSearch.get();\r\n                    playerSearchPromise.then((response) => {\r\n                        let playerStatsData = response.data.people[0];\r\n\r\n                        //get the correct stats from the playerStats and that is a new object in player\r\n                        let seasonStats = playerStatsData.stats[0].splits[0].stat;\r\n\r\n\r\n                        let playerDataTeam = playerStatsData.currentTeam.name;\r\n                        //montreal canadiens has an accent, problem finding it in the json\r\n                        if (playerDataTeam.includes(\"Canadiens\")) {\r\n                            playerDataTeam = \"Montreal Canadiens\";\r\n                        }\r\n\r\n                        let team = teamData.teams.find(team => team.fullName === playerDataTeam);\r\n                        if (team != null) {\r\n                            //change the player's team to the current team based on playerstats data (that is more accurate than the summary search)\r\n                            basicData.teamAbbrevs = team.abbreviation;\r\n                        }\r\n                        else {\r\n                            console.log(\"Could not find team \" + playerDataTeam);\r\n                        }\r\n                        \r\n\r\n                        //game log search\r\n                        let gameLogLink = \"https://cors.bridged.cc/\";\r\n                        gameLogLink += \"https://statsapi.web.nhl.com/api/v1/people/\"\r\n                        gameLogLink += key;\r\n                        gameLogLink += \"/stats?stats=gameLog&expand=stats.team&season=\";\r\n                        gameLogLink += this.state.currentSeason;\r\n                        let gameLogSearch = axios.create({\r\n                            baseURL: gameLogLink,\r\n                            withCredentials: false,\r\n                            headers: {\r\n                            }\r\n                        });\r\n\r\n                        const gameLogPromise = gameLogSearch.get();\r\n                        gameLogPromise.then((response) => {\r\n                            let gameLogSplits = response.data.stats[0].splits;\r\n\r\n                            //formatted/custom data\r\n                            //get the opponent from the team list\r\n                            let opponent = null;\r\n                            if (basicData) {\r\n                                opponent = this.getPlayerOpponent(basicData);\r\n                            }\r\n\r\n                            //add goalsPerGame and shotsPerGame to basic data\r\n                            basicData.goalsPerGame = (basicData.goals / basicData.gamesPlayed).toFixed(2);\r\n                            basicData.shotsPerGame = (basicData.shots / basicData.gamesPlayed).toFixed(2);\r\n                            player.fullName = fullName;\r\n                            player.shortName = firstName.substring(0, 1) + \" \" + lastName;\r\n\r\n                            let playerData = {\r\n                                firstName: player.firstName,\r\n                                lastName: player.lastName,\r\n                                fullName: player.firstName + \" \" + player.lastName,\r\n                                shortName: firstName.substring(0, 1) + \". \" + lastName,\r\n                                position: player.position,\r\n                                key: key,\r\n                                id: key,\r\n                                nhldata: basicData,\r\n                                statsdata : seasonStats,\r\n                                gamelogData: gameLogSplits,\r\n                                opponent: opponent,                               \r\n                            };\r\n\r\n                            //shallow copy of entire array\r\n                            let newPlayerLists = [...this.state.playerLists];\r\n                            let playerList = newPlayerLists[set.id - 1];\r\n                            playerList.players = [...playerList.players, playerData]\r\n\r\n                            //see if the player is injured\r\n                            if (this.state.webInjuries) { //it may be null if this call failed and that is OK\r\n                                let injury = this.state.webInjuries.find((injury) => injury.player === playerData.fullName);\r\n                                if (injury) {\r\n                                    playerData.injury = injury;\r\n                                }\r\n                            }\r\n\r\n                            if (playerData.injury) {\r\n                                let newInjuryList = [...this.state.playerInjuries, playerData.injury];\r\n                                this.setState({ playerLists: newPlayerLists, playerInjuries: newInjuryList });\r\n                            }\r\n                            else {\r\n                                this.setState({ playerLists: newPlayerLists });\r\n                            }\r\n                        }).catch((error) => {\r\n                            console.log(\"Game log stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                        });\r\n\r\n                    }).catch((error) => {\r\n                        console.log(\"Player stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                    });\r\n\r\n                }).catch((error) => {\r\n                    console.log(\"Player search didn't work for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error)\r\n                });\r\n            });\r\n        });\r\n    }    \r\n\r\n    getTeamAbbreviation(teamFullName) {      \r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        return selectedTeam ? selectedTeam.abbreviation : \"MTL\"; //if it can't find it, its because of special character in montreal\r\n    }\r\n    \r\n    getTimmiesAbbreviation(teamFullName) {\r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        if (selectedTeam) {\r\n            return selectedTeam.timmiesAbbreviation ? selectedTeam.timmiesAbbreviation : \"\";\r\n        }\r\n    }\r\n\r\n    getPlayerOpponent(basicData) {\r\n        let opponent = null;\r\n        if (basicData) {\r\n            let playerTeamAbbr = basicData.teamAbbrevs;\r\n            let playerTeam = this.state.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n            if (playerTeam) {\r\n\r\n                let game;\r\n                game = this.state.games.find(game => game.teams.home.team.name === playerTeam.teamFullName || game.teams.away.team.name === playerTeam.teamFullName);\r\n                if (game) {\r\n                    if (game.teams.home.team.name === playerTeam.teamFullName) {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.away.team.name);\r\n                    }\r\n                    else {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.home.team.name);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(\"Can't find game for player \" + basicData.skaterFullName);\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Can't find player team for player \" + basicData.skaterFullName);\r\n            }\r\n        }\r\n\r\n        if (!opponent) {\r\n            console.log(\"Failed to get opponent for \" + basicData.skaterFullName);\r\n            console.log(\"Team Abbr: \" + basicData.teamAbbrevs);\r\n            opponent = { teamAbbr: \"nhl\", goalsAgainstPerGame: 0 };\r\n        }\r\n        return opponent;\r\n    }\r\n\r\n    setCurrentView(view) {\r\n        if (view != this.state.currentView) {\r\n            this.setState({ currentView: view }, () => { if (view === \"trend\") this.setTrendColumns(); else this.setOverallColumns() });\r\n        }\r\n    }\r\n\r\n    setOverallColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"GP\",\r\n                        id: \"playerGames\",\r\n                        accessor: \"nhldata.gamesPlayed\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: \"nhldata.goals\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: \"nhldata.shotsPerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: \"statsdata.powerPlayTimeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: \"statsdata.timeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: \"nhldata.goalsPerGame\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Opp.GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    setTrendColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Games\",\r\n                        id: \"games\",\r\n                        accessor: (row) => this.getLowerTrendGamesPlayed(row, this.state.trendGames),\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: (row) => { return this.getValueFromPastGames(row, \"goals\", this.state.trendGames) },\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"shots\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"long-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"powerPlayTimeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"timeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"goals\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"short-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"Opp.Season GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    getValueFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let returnValue = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames -1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            returnValue += parseInt(gameStats[field]);\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    getTOIFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let minutes = 0;\r\n        let seconds = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames - 1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            let toiValue = gameStats[field];\r\n            let toiSplit = toiValue.split(\":\");\r\n            let gameMinutes = toiSplit[0];\r\n            let gameSeconds = toiSplit[1];\r\n\r\n            minutes += parseInt(gameMinutes);\r\n            seconds += parseInt(gameSeconds);\r\n        }\r\n\r\n        let trendOrGamesPlayed = this.getLowerTrendGamesPlayed(player, numGames);\r\n        let totalSeconds = seconds + (minutes * 60);\r\n        let trendSeconds = totalSeconds / trendOrGamesPlayed;\r\n        let finalMinutes = trendSeconds / 60;\r\n        let finalSeconds = trendSeconds % 60;\r\n\r\n        return Math.floor(finalMinutes) + \":\" + Math.floor(finalSeconds).toString().padStart(2, \"0\");\r\n    }\r\n\r\n    getGoalStreak(player) {\r\n        var gamelog = player.gamelogData;\r\n        var streak = 0;\r\n        \r\n        if (gamelog.length > 0) {\r\n            //check the first one to see if they scored or not.  If they did start at 1, if they didn't be negative 1\r\n        }\r\n\r\n        return streak;\r\n    }\r\n\r\n    getGoalsPerGameVsOpponent(player) {\r\n        var opponent = player.opponent;\r\n        var gamelog = player.gamelogData;\r\n        var goals = 0;\r\n        if (gamelog.length > 0) {\r\n\r\n        }\r\n        return goals;\r\n    }\r\n\r\n    getLowerTrendGamesPlayed(player, numGames) {\r\n        return numGames < player.nhldata.gamesPlayed ? numGames : player.nhldata.gamesPlayed\r\n    }\r\n\r\n    adjustTrendGames(number) {\r\n        let newTrendGames = parseInt(this.state.trendGames) + parseInt(number);\r\n\r\n        if (newTrendGames > 0) {\r\n            this.setTrendGames(newTrendGames);\r\n        }\r\n    }\r\n\r\n    setTrendGames(number) {\r\n        const newValue = parseInt(number);\r\n\r\n        if (Number.isInteger(newValue)) {\r\n            if (newValue > 0) {\r\n                this.setState({ trendGamesInput: newValue, trendGames: newValue }, this.setTrendColumns());\r\n            }\r\n        }\r\n        else {\r\n            //special rule for empty, allow it but it won't set the actual trend games state\r\n            if (number === \"\") {\r\n                this.setState({ trendGamesInput: number });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let display = <div>ok</div>\r\n\r\n        if (this.state.errorMessage) {\r\n            display = <div className=\"error-message\">{this.state.errorMessage}</div>\r\n        }\r\n        else if (this.state.loading) {\r\n            display = <div><img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"loading...\" /></div>\r\n        }\r\n        else {\r\n            let trendSettings;\r\n            if (this.state.currentView === \"trend\") {\r\n                trendSettings = <div className=\"trend-settings\"><Button variant=\"light\" onClick={() => this.adjustTrendGames(-1)}>-</Button>Last <input className=\"trend-games\" value={this.state.trendGamesInput} onChange={(e) => { this.setTrendGames(e.target.value); }} /> Games<Button variant=\"light\" onClick={() => this.adjustTrendGames(1)}>+</Button></div>\r\n            }\r\n            let warnings;\r\n            if (this.state.postponedGames || this.state.playerInjuries) {\r\n                warnings = <Warnings postponedGames={this.state.postponedGames} injuries={this.state.playerInjuries}/>\r\n            }\r\n            display =\r\n                <div>\r\n                {warnings}\r\n                <Button onClick={(e) => this.setCurrentView(\"overall\")} variant={this.state.currentView === \"overall\" ? \"dark\" : \"light\"}>Overall</Button><Button onClick={(e) => this.setCurrentView(\"trend\")} variant={this.state.currentView === \"trend\" ? \"dark\" : \"light\"}>Trend</Button>\r\n                {trendSettings}                \r\n                <PlayerLists playerLists={this.state.playerLists} games={this.state.games} teams={this.state.teams} playerListColumns={this.state.playerListColumns} />\r\n                </div>\r\n        }\r\n        return (display);\r\n    }\r\n}\r\n\r\nexport default TimmiesApp;","import React, { Component } from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gamesplayed: 0,\r\n            goals : 0,\r\n        }\r\n\r\n        this.getGoalsPerGame = this.getGoalsPerGame.bind(this);\r\n        this.getShotsPerGame = this.getShotsPerGame.bind(this);\r\n        this.getPPTimeOnIce = this.getPPTimeOnIce.bind(this)\r\n        this.getAverageTimeOnIce = this.getAverageTimeOnIce.bind(this)\r\n        this.getGamesPlayed = this.getGamesPlayed.bind(this);\r\n        this.getGoals = this.getGoals.bind(this);\r\n\r\n        this.getOpponentGAA = this.getOpponentGAA.bind(this);\r\n    }\r\n\r\n    getGamesPlayed() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.gamesPlayed;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoals() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.goals;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoalsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.goals / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getShotsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.shots / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getOpponentGAA() {\r\n        if (!this.props.player.opponent) {\r\n            return \"N/A\";\r\n        }\r\n        else {\r\n            return (this.props.player.opponent.goalsAgainstPerGame.toFixed(2));\r\n        }\r\n    }\r\n\r\n    getPPTimeOnIce() {\r\n        if (!this.props.player.statsdata) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return this.props.player.statsdata.powerPlayTimeOnIcePerGame;\r\n        }\r\n    }\r\n\r\n    getAverageTimeOnIce() {\r\n        if (!this.props.player.nhldata) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return this.props.player.statsdata.timeOnIcePerGame;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col className=\"player-name\" xs=\"2\">{this.props.player.firstName.substring(0, 1)}. {this.props.player.lastName}</Col>\r\n                <Col xs=\"1\">{this.props.player.position}</Col>\r\n                <Col xs=\"1\"> {this.getGamesPlayed()}</Col>\r\n                <Col xs=\"1\">{this.getGoals()}</Col>\r\n                <Col xs=\"1\">{this.getShotsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getPPTimeOnIce()}</Col>\r\n                <Col xs=\"1\">{this.getAverageTimeOnIce()}</Col>\r\n                <Col xs=\"1\">{this.getGoalsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getOpponentGAA()}</Col>\r\n            </Row>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Player;","import './App.css';\r\nimport paypallogo from './paypal.png';\r\nimport Container from 'react-bootstrap/Container'\r\nimport TimmiesApp from './TimmiesApp'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <link\r\n              rel=\"stylesheet\"\r\n              href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n              integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n              crossOrigin=\"anonymous\"\r\n          />\r\n          <header className=\"app-title\">\r\n            Tim Horton's Hockey Challenge Helper\r\n          </header>\r\n          <div>\r\n              <TimmiesApp />\r\n              <footer className=\"footer\" >\r\n                  <div>Questions? Suggestions? Find me on <a href={\"//www.twitter.com/Zorbane\"} target=\"_blank\">Twitter</a></div>\r\n                  <div>Buy me Timmies? <a href='https://www.paypal.com/paypalme/zorbane/' target=\"_blank\"><img className=\"paypal-logo\" src={paypallogo}/></a></div>\r\n              </footer>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}