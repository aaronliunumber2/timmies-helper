{"version":3,"sources":["Player.js","PlayerList.js","PlayerLists.js","TimmiesApp.js","App.js","reportWebVitals.js","index.js"],"names":["Player","props","state","gamesplayed","goals","getGoalsPerGame","bind","getShotsPerGame","getPPTimeOnIce","getAverageTimeOnIce","getGamesPlayed","getGoals","getOpponentGAA","this","player","nhldata","gamesPlayed","toFixed","shots","opponent","goalsAgainstPerGame","statsdata","powerPlayTimeOnIcePerGame","timeOnIcePerGame","Row","Col","className","xs","firstName","substring","lastName","position","Component","PlayerList","players","sort","a","b","reverse","map","index","playerTeamAbbr","teamAbbrevs","playerTeam","teams","find","team","teamAbbr","game","games","home","abbr","timmiesAbbr","away","console","log","key","PlayerLists","showList","clickHeader","i","playerLists","length","setState","id","newShowList","show","set","href","onClick","e","TimmiesApp","loading","errorMessage","currentSeason","seasonType","loadTimmies","loadSetData","loadTeamData","getTeamAbbreviation","getTimmiesAbbreviation","axios","post","then","response","data","sets","catch","error","create","baseURL","withCredentials","headers","get","teamData","fullName","teamFullName","selectedTeam","abbreviation","timmiesAbbreviation","trim","jsonPlayer","playerNames","playerName","timmiesName","basicSearchLink","basicData","playerId","playerData","newPlayerLists","playerList","playerIdLink","playerStatsData","people","includes","playerDataTeam","currentTeam","name","seasonStats","stats","splits","stat","src","alt","App","rel","integrity","crossOrigin","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a1cb7e1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gamesplayed: 0,\r\n            goals : 0,\r\n        }\r\n\r\n        this.getGoalsPerGame = this.getGoalsPerGame.bind(this);\r\n        this.getShotsPerGame = this.getShotsPerGame.bind(this);\r\n        this.getPPTimeOnIce = this.getPPTimeOnIce.bind(this)\r\n        this.getAverageTimeOnIce = this.getAverageTimeOnIce.bind(this)\r\n        this.getGamesPlayed = this.getGamesPlayed.bind(this);\r\n        this.getGoals = this.getGoals.bind(this);\r\n\r\n        this.getOpponentGAA = this.getOpponentGAA.bind(this);\r\n    }\r\n\r\n    getGamesPlayed() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.gamesPlayed;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoals() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.goals;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoalsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.goals / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getShotsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.shots / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getOpponentGAA() {\r\n        if (!this.props.opponent) {\r\n            return \"N/A\";\r\n        }\r\n        else {\r\n            return (this.props.opponent.goalsAgainstPerGame.toFixed(2));\r\n        }\r\n    }\r\n\r\n    getPPTimeOnIce() {\r\n        if (!this.props.player.statsdata) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return this.props.player.statsdata.powerPlayTimeOnIcePerGame;\r\n        }\r\n    }\r\n\r\n    getAverageTimeOnIce() {\r\n        if (!this.props.player.nhldata) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return this.props.player.statsdata.timeOnIcePerGame;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col className=\"player-name\" xs=\"2\">{this.props.player.firstName.substring(0, 1)}. {this.props.player.lastName}</Col>\r\n                <Col xs=\"1\">{this.props.player.position}</Col>\r\n                <Col xs=\"1\"> {this.getGamesPlayed()}</Col>\r\n                <Col xs=\"1\">{this.getGoals()}</Col>\r\n                <Col xs=\"1\">{this.getShotsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getPPTimeOnIce()}</Col>\r\n                <Col xs=\"1\">{this.getAverageTimeOnIce()}</Col>\r\n                <Col xs=\"1\">{this.getGoalsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getOpponentGAA()}</Col>\r\n            </Row>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react'\r\nimport Player from './Player'\r\nimport Container from 'react-bootstrap/Row'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nclass PlayerList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col xs=\"2\">Name</Col>\r\n                    <Col xs=\"1\">Pos</Col>\r\n                    <Col xs=\"1\">Games</Col>\r\n                    <Col xs=\"1\">Goals</Col>\r\n                    <Col xs=\"1\">Shots/GP</Col>\r\n                    <Col xs=\"1\">PP.TOI/GP</Col>\r\n                    <Col xs=\"1\">TOI/GP</Col>\r\n                    <Col xs=\"1\">Goals/GP</Col>\r\n                    <Col xs=\"1\">Opp.GAA</Col>\r\n                </Row>\r\n            {\r\n                this.props.players\r\n                    .sort((a, b) => (a.nhldata ? a.nhldata.goals / a.nhldata.gamesPlayed : 0) - (b.nhldata ? b.nhldata.goals / b.nhldata.gamesPlayed : 0))\r\n                    .reverse()\r\n                    .map((player, index) => {\r\n                        let opponent = null;\r\n                        if (player.nhldata) {\r\n                            let playerTeamAbbr = player.nhldata.teamAbbrevs;\r\n                            let playerTeam = this.props.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n                            if (playerTeam) {\r\n                                let game = this.props.games.find(game => game.teams.home.abbr === playerTeam.timmiesAbbr || game.teams.away.abbr === playerTeam.timmiesAbbr);\r\n                                if (game) {\r\n                                    if (game.teams.home.abbr === playerTeamAbbr) {\r\n                                        opponent = this.props.teams.find(team => team.timmiesAbbr === game.teams.away.abbr);\r\n                                    }\r\n                                    else {\r\n                                        opponent = this.props.teams.find(team => team.timmiesAbbr === game.teams.home.abbr);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (!opponent) {\r\n                            if (!player.nhldata) {\r\n                                console.log(\"No NHL data for \" + player.firstName + \" \" + player.lastName);\r\n                            }\r\n                            else {\r\n                                console.log(\"Failed to get opponent for \" + player.firstName + \" \" + player.lastName);\r\n                                console.log(\"Team Abbr: \" + player.nhldata.teamAbbrevs);\r\n                            }\r\n                        }\r\n\r\n                        return (<Player player={player} opponent={opponent} key={player.key}/>)                    \r\n                })\r\n            }\r\n            </div>\r\n                )\r\n    }\r\n}\r\n\r\nexport default PlayerList;","import React, { Component } from 'react'\r\nimport PlayerList from './PlayerList'\r\n\r\nclass PlayerLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showList: []\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //initialize the showList array\r\n        let showList = [];\r\n        for (let i = 0; i < this.props.playerLists.length; i++) {\r\n            showList = [...showList, true];\r\n        }\r\n\r\n        this.setState({ showList });\r\n    }\r\n\r\n\r\n    clickHeader(id) {\r\n        //shallow copy of entire array\r\n        let newShowList = [...this.state.showList];\r\n        let show = newShowList[id - 1];\r\n        newShowList[id - 1] = !show;\r\n        this.setState({ showList : newShowList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {\r\n                        this.props.playerLists.map((set) => {\r\n                            return (\r\n                                <div className=\"player-list\" key={set.id}>\r\n                                    <h2 className='list-header' ><a href=\"#\" onClick={(e) => this.clickHeader(set.id)}>List {set.id}</a></h2>\r\n                                    <div>\r\n                                        {this.state.showList[set.id-1] && <PlayerList players={set.players} games={this.props.games} teams={this.props.teams} />}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default PlayerLists;","import React, { Component } from 'react'\r\nimport PlayerLists from './PlayerLists'\r\nimport teamData from './data/teams.json'\r\nimport playerNames from './data/playerNames.json'\r\nimport axios from 'axios'\r\n\r\nclass TimmiesApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }],\r\n            games: null,\r\n            teams : [],\r\n            errorMessage: \"\",\r\n            currentSeason: \"20202021\",\r\n            seasonType : \"regular\",\r\n        }\r\n\r\n        this.loadTimmies = this.loadTimmies.bind(this);\r\n        this.loadSetData = this.loadSetData.bind(this);\r\n        this.loadTeamData = this.loadTeamData.bind(this);\r\n        this.getTeamAbbreviation = this.getTeamAbbreviation.bind(this);\r\n        this.getTimmiesAbbreviation = this.getTimmiesAbbreviation.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTimmies();\r\n        this.loadTeamData();\r\n    }\r\n\r\n    loadTimmies() {\r\n        const promise = axios.post(\"https://cors.bridged.cc/http://ec2-54-158-170-220.compute-1.amazonaws.com/api/v1/players\");\r\n        promise.then((response) => {\r\n            this.setState({ loading: false, games: response.data.games });\r\n            this.loadSetData(response.data.sets);\r\n        })\r\n            .catch((error) => {\r\n                this.setState({ errorMessage: \"Something went wrong. Error: \" + error })\r\n            });\r\n    }\r\n\r\n    loadTeamData() {\r\n        let nhlLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/team/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22points%22,%22direction%22:%22DESC%22%7D,%7B%22property%22:%22wins%22,%22direction%22:%22DESC%22%7D%5D&start=0&limit=50&factCayenneExp=gamesPlayed%3E=1&cayenneExp=gameTypeId=2%20and%20seasonId%3C=20202021%20and%20seasonId%3E=20202021\";\r\n        let instance = axios.create({\r\n            baseURL: nhlLink,\r\n            withCredentials: false,\r\n            headers: {\r\n            }\r\n        });\r\n        const promise = instance.get();\r\n        promise.then((response) => {\r\n            //go through each team and set it's abbreviation\r\n            let teamData = response.data.data;\r\n            for (let i = 0; i < teamData.length; i++) {\r\n                let fullName = teamData[i].teamFullName;                \r\n                let abbr = this.getTeamAbbreviation(fullName);\r\n                let timmiesAbbr = this.getTimmiesAbbreviation(fullName);\r\n                \r\n                teamData[i].teamAbbr = abbr;\r\n                if (timmiesAbbr) {\r\n                    teamData[i].timmiesAbbr = timmiesAbbr;\r\n                }\r\n                else {\r\n                    teamData[i].timmiesAbbr = abbr;\r\n                }\r\n            }\r\n            this.setState({ teams: teamData });\r\n\r\n        }).catch((error) => {\r\n                    console.log(\"Unable to get team stats from NHL website. Error: \" + error)\r\n                });\r\n    }\r\n\r\n    getTeamAbbreviation(teamFullName) {      \r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        return selectedTeam ? selectedTeam.abbreviation : \"MTL\"; //if it can't find it, its because of special character in montreal\r\n    }\r\n\r\n    getTimmiesAbbreviation(teamFullName) {\r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        if (selectedTeam) {\r\n            return selectedTeam.timmiesAbbreviation ? selectedTeam.timmiesAbbreviation : \"\";\r\n        }\r\n    }\r\n\r\n\r\n    loadSetData(sets) {\r\n        sets.map((set) => {\r\n            set.players.map((player) => {\r\n                //we want to see if we can find the player in the player.json table which means the tims name and nhl name do not match\r\n                let firstName = player.firstName.trim();\r\n                let lastName = player.lastName.trim();\r\n                let fullName = firstName + \" \" + lastName;\r\n                let jsonPlayer = playerNames.players.find(playerName => playerName.timmiesName === fullName);\r\n                if (jsonPlayer) {\r\n                    firstName = jsonPlayer.firstName;\r\n                    lastName = jsonPlayer.lastName;\r\n                    console.log(\"Found timmies player \" + fullName + \". Renamed to \" + firstName + \" \" + lastName);\r\n                }\r\n\r\n\r\n                let basicSearchLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/skater/summary?cayenneExp=gameTypeId=2%20and%20seasonId%3E=20202021%20and%20skaterFullName%20likeIgnoreCase%20%22%25\" + firstName + \"%20\" + lastName + \"%25%22\";\r\n                let basicSearch = axios.create({\r\n                    baseURL: basicSearchLink,\r\n                    withCredentials: false,\r\n                    headers: {\r\n                    }\r\n                });\r\n                const basicPromise = basicSearch.get();\r\n                basicPromise.then((response) => {\r\n                    const basicData = response.data.data[0];\r\n                    let key = player.firstName + player.lastName;\r\n                    if (basicData) {\r\n                        key = basicData.playerId\r\n                    }\r\n                    else { \r\n                        //if we can't find the nhl player just add it but with no stats\r\n                        let playerData = { firstName: player.firstName, lastName: player.lastName, position: player.position, key: key };\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n                    }\r\n\r\n\r\n                    let playerIdLink = \"https://cors.bridged.cc/\";\r\n                    playerIdLink = playerIdLink + \"https://statsapi.web.nhl.com/api/v1/people/\";\r\n                    playerIdLink = playerIdLink + key;\r\n                    playerIdLink = playerIdLink + \"?expand=person.stats&stats=\";\r\n                    if (this.state.seasonType === \"regular\") {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeason\";\r\n                    }\r\n                    else {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeasonPlayoffs\";\r\n                    }\r\n                    playerIdLink = playerIdLink + \"&season=\" + this.state.currentSeason;\r\n\r\n                    let playerSearch = axios.create({\r\n                        baseURL: playerIdLink,\r\n                        withCredentials: false,\r\n                        headers: {\r\n                        }\r\n                    });\r\n\r\n                    const playerSearchPromise = playerSearch.get();\r\n                    playerSearchPromise.then((response) => {\r\n                        let playerStatsData = response.data.people[0];\r\n\r\n                        //first check if they belong to multiple teams, if so we need to check the teams json to set the proper abbreviation\r\n                        if (basicData.teamAbbrevs.includes(\",\")) {\r\n                            let playerDataTeam = playerStatsData.currentTeam.name;\r\n                            let team = teamData.teams.find(team => team.fullName === playerDataTeam);\r\n                            basicData.teamAbbrevs = team.abbreviation;\r\n                        }\r\n\r\n                        //get the correct stats from the playerStats and that is a new object in player\r\n                        let seasonStats =  playerStatsData.stats[0].splits[0].stat;\r\n\r\n\r\n                        let playerData = { firstName: player.firstName, lastName: player.lastName, position: player.position, key: key, nhldata : basicData, statsdata : seasonStats };\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n\r\n                    }).catch((error) => {\r\n                        console.log(\"Player stats failed for  \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                    });\r\n\r\n                }).catch((error) => {\r\n                    console.log(\"Player search didn't work for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error)\r\n                });\r\n            });     \r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let display = <div>ok</div>\r\n\r\n        if (this.state.loading) {\r\n            display = <div><img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"loading...\" /></div>\r\n        }\r\n        else if (this.state.errorMessage) {\r\n            display = <div>{this.state.errorMessage}</div>\r\n        }\r\n        else {\r\n            display = <div><PlayerLists playerLists={this.state.playerLists} games={this.state.games} teams={this.state.teams}/></div>\r\n        }\r\n        return (display);\r\n    }\r\n}\r\n\r\nexport default TimmiesApp;","import './App.css';\r\nimport Container from 'react-bootstrap/Container'\r\nimport TimmiesApp from './TimmiesApp'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <link\r\n              rel=\"stylesheet\"\r\n              href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n              integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n              crossOrigin=\"anonymous\"\r\n          />\r\n          <header>\r\n            Timmies Hockey Helper  \r\n          </header>\r\n          <div>\r\n              <TimmiesApp />\r\n              <div className=\"footer\">\r\n                  Questions? Suggestions? Find me on <a href={\"//www.twitter.com/Zorbane\"} target=\"_blank\">Twitter</a>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}