{"version":3,"sources":["PlayerList.js","PlayerLists.js","TimmiesApp.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerList","columns","data","useTable","initialState","sortBy","id","desc","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","row","i","getRowProps","cells","cell","getCellProps","className","PlayerLists","props","state","showList","clickHeader","bind","this","playerLists","length","Header","accessor","Cell","value","toFixed","setState","newShowList","show","set","href","onClick","e","players","Component","TimmiesApp","loading","games","teams","errorMessage","currentSeason","seasonType","loadTimmies","loadSetData","loadTeamData","getPlayerOpponent","getTeamAbbreviation","getTimmiesAbbreviation","axios","post","then","response","sets","catch","error","create","baseURL","withCredentials","get","teamData","fullName","teamFullName","abbr","timmiesAbbr","teamAbbr","console","log","selectedTeam","find","team","abbreviation","timmiesAbbreviation","basicData","opponent","playerTeamAbbr","teamAbbrevs","playerTeam","game","home","away","skaterFullName","player","firstName","trim","lastName","jsonPlayer","playerNames","playerName","timmiesName","basicSearchLink","key","playerId","playerData","position","newPlayerLists","playerList","playerIdLink","playerStatsData","people","includes","playerDataTeam","currentTeam","name","seasonStats","stats","splits","stat","goalsPerGame","goals","gamesPlayed","shotsPerGame","shots","shortName","substring","nhldata","statsdata","src","alt","App","rel","integrity","crossOrigin","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b2fb23a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\n\r\nexport default function PlayerList({ columns, data }) {\r\n\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState:\r\n            {\r\n                sortBy: [\r\n                    {\r\n                        id: \"playerGoalsPerGame\",\r\n                        desc: true,\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        useSortBy\r\n    );\r\n\r\n\r\n\r\n    return(\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps([{className: cell.column.className}])}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport PlayerList from './PlayerList'\r\n\r\nclass PlayerLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showList: [],\r\n            columns : null\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //initialize the showList array\r\n        let showList = [];\r\n        for (let i = 0; i < this.props.playerLists.length; i++) {\r\n            showList = [...showList, true];\r\n        }\r\n\r\n        const columns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\"\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"GP\",\r\n                        id: \"playerGames\",\r\n                        accessor: \"nhldata.gamesPlayed\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: \"nhldata.goals\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: \"nhldata.shotsPerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: \"statsdata.powerPlayTimeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: \"statsdata.timeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: \"nhldata.goalsPerGame\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Opp.GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div>{props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ showList, columns });\r\n    }\r\n\r\n\r\n    clickHeader(id) {\r\n        //shallow copy of entire array\r\n        let newShowList = [...this.state.showList];\r\n        let show = newShowList[id - 1];\r\n        newShowList[id - 1] = !show;\r\n        this.setState({ showList : newShowList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {\r\n                        this.props.playerLists.map((set) => {\r\n                            return (\r\n                                <div className=\"player-list\" key={set.id}>\r\n                                    <h2 className='list-header' ><a href=\"#\" onClick={(e) => this.clickHeader(set.id)}>List {set.id}</a></h2>\r\n                                    <div className='stats-list'>\r\n                                        {this.state.showList[set.id - 1] && <PlayerList data={set.players} columns={this.state.columns}/>}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default PlayerLists;","import React, { Component } from 'react'\r\nimport PlayerLists from './PlayerLists'\r\nimport teamData from './data/teams.json'\r\nimport playerNames from './data/playerNames.json'\r\nimport axios from 'axios'\r\n\r\nclass TimmiesApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }],\r\n            games: null,\r\n            teams : [],\r\n            errorMessage: \"\",\r\n            currentSeason: \"20202021\",\r\n            seasonType : \"regular\",\r\n        }\r\n\r\n        this.loadTimmies = this.loadTimmies.bind(this);\r\n        this.loadSetData = this.loadSetData.bind(this);\r\n        this.loadTeamData = this.loadTeamData.bind(this);\r\n        this.getPlayerOpponent = this.getPlayerOpponent.bind(this);\r\n        this.getTeamAbbreviation = this.getTeamAbbreviation.bind(this);\r\n        this.getTimmiesAbbreviation = this.getTimmiesAbbreviation.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTeamData();\r\n    }\r\n\r\n    loadTimmies() {\r\n        const promise = axios.post(\"https://cors.bridged.cc/http://ec2-54-158-170-220.compute-1.amazonaws.com/api/v1/players\");\r\n        promise.then((response) => {\r\n            this.setState({ loading: false, games: response.data.games }, this.loadSetData(response.data.sets));\r\n        })\r\n            .catch((error) => {\r\n                this.setState({ errorMessage: \"Sorry!  Unable to load Tims Hockey Challenge Data.  Please try again later.\" });\r\n            });\r\n    }\r\n\r\n    loadTeamData() {\r\n        let nhlLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/team/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22points%22,%22direction%22:%22DESC%22%7D,%7B%22property%22:%22wins%22,%22direction%22:%22DESC%22%7D%5D&start=0&limit=50&factCayenneExp=gamesPlayed%3E=1&cayenneExp=gameTypeId=2%20and%20seasonId%3C=20202021%20and%20seasonId%3E=20202021\";\r\n        let instance = axios.create({\r\n            baseURL: nhlLink,\r\n            withCredentials: false,\r\n            headers: {\r\n            }\r\n        });\r\n        const promise = instance.get();\r\n        promise.then((response) => {\r\n            //go through each team and set it's abbreviation\r\n            let teamData = response.data.data;\r\n            for (let i = 0; i < teamData.length; i++) {\r\n                let fullName = teamData[i].teamFullName;                \r\n                let abbr = this.getTeamAbbreviation(fullName);\r\n                let timmiesAbbr = this.getTimmiesAbbreviation(fullName);\r\n                \r\n                teamData[i].teamAbbr = abbr;\r\n                if (timmiesAbbr) {\r\n                    teamData[i].timmiesAbbr = timmiesAbbr;\r\n                }\r\n                else {\r\n                    teamData[i].timmiesAbbr = abbr;\r\n                }\r\n            }\r\n            this.setState({ teams: teamData }, this.loadTimmies());\r\n\r\n\r\n\r\n        }).catch((error) => {\r\n                    console.log(\"Unable to get team stats from NHL website. Error: \" + error)\r\n                });\r\n    }\r\n\r\n    getTeamAbbreviation(teamFullName) {      \r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        return selectedTeam ? selectedTeam.abbreviation : \"MTL\"; //if it can't find it, its because of special character in montreal\r\n    }\r\n\r\n    getTimmiesAbbreviation(teamFullName) {\r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        if (selectedTeam) {\r\n            return selectedTeam.timmiesAbbreviation ? selectedTeam.timmiesAbbreviation : \"\";\r\n        }\r\n    }\r\n\r\n    getPlayerOpponent(basicData) {\r\n        let opponent = null;\r\n        if (basicData) {\r\n            let playerTeamAbbr = basicData.teamAbbrevs;\r\n            let playerTeam = this.state.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n            if (playerTeam) {\r\n                let game = this.state.games.find(game => game.teams.home.abbr === playerTeam.timmiesAbbr || game.teams.away.abbr === playerTeam.timmiesAbbr);\r\n                if (game) {\r\n                    if (game.teams.home.abbr === playerTeamAbbr) {\r\n                        opponent = this.state.teams.find(team => team.timmiesAbbr === game.teams.away.abbr);\r\n                    }\r\n                    else {\r\n                        opponent = this.state.teams.find(team => team.timmiesAbbr === game.teams.home.abbr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!opponent) {\r\n            console.log(\"Failed to get opponent for \" + basicData.skaterFullName);\r\n            console.log(\"Team Abbr: \" + basicData.teamAbbrevs);\r\n\r\n        }\r\n        return opponent;\r\n    }\r\n\r\n    loadSetData(sets) {\r\n        sets.map((set) => {\r\n            set.players.map((player) => {\r\n                //we want to see if we can find the player in the player.json table which means the tims name and nhl name do not match\r\n                let firstName = player.firstName.trim();\r\n                let lastName = player.lastName.trim();\r\n                let fullName = firstName + \" \" + lastName;\r\n                let jsonPlayer = playerNames.players.find(playerName => playerName.timmiesName === fullName);\r\n                if (jsonPlayer) {\r\n                    firstName = jsonPlayer.firstName;\r\n                    lastName = jsonPlayer.lastName;\r\n                    console.log(\"Found timmies player \" + fullName + \". Renamed to \" + firstName + \" \" + lastName);\r\n                }\r\n\r\n\r\n\r\n\r\n                //get basic nhl data\r\n                let basicSearchLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/skater/summary?cayenneExp=gameTypeId=2%20and%20seasonId%3E=20202021%20and%20skaterFullName%20likeIgnoreCase%20%22%25\" + firstName + \"%20\" + lastName + \"%25%22\";\r\n                let basicSearch = axios.create({\r\n                    baseURL: basicSearchLink,\r\n                    withCredentials: false,\r\n                    headers: {\r\n                    }\r\n                });\r\n                const basicPromise = basicSearch.get();\r\n                basicPromise.then((response) => {\r\n                    const basicData = response.data.data[0];\r\n                    let key = player.firstName + player.lastName;\r\n                    if (basicData) {\r\n                        key = basicData.playerId;\r\n                    }\r\n                    else { \r\n                        //if we can't find the nhl player just add it but with no stats\r\n                        let playerData = { firstName: player.firstName, lastName: player.lastName, position: player.position, key: key };\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n                    }\r\n\r\n\r\n                    let playerIdLink = \"https://cors.bridged.cc/\";\r\n                    playerIdLink = playerIdLink + \"https://statsapi.web.nhl.com/api/v1/people/\";\r\n                    playerIdLink = playerIdLink + key;\r\n                    playerIdLink = playerIdLink + \"?expand=person.stats&stats=\";\r\n                    if (this.state.seasonType === \"regular\") {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeason\";\r\n                    }\r\n                    else {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeasonPlayoffs\";\r\n                    }\r\n                    playerIdLink = playerIdLink + \"&season=\" + this.state.currentSeason;\r\n\r\n                    let playerSearch = axios.create({\r\n                        baseURL: playerIdLink,\r\n                        withCredentials: false,\r\n                        headers: {\r\n                        }\r\n                    });\r\n\r\n                    const playerSearchPromise = playerSearch.get();\r\n                    playerSearchPromise.then((response) => {\r\n                        let playerStatsData = response.data.people[0];\r\n\r\n                        //first check if they belong to multiple teams, if so we need to check the teams json to set the proper abbreviation\r\n                        if (basicData.teamAbbrevs.includes(\",\")) {\r\n                            let playerDataTeam = playerStatsData.currentTeam.name;\r\n                            let team = teamData.teams.find(team => team.fullName === playerDataTeam);\r\n                            basicData.teamAbbrevs = team.abbreviation;\r\n                        }\r\n\r\n                        //get the correct stats from the playerStats and that is a new object in player\r\n                        let seasonStats = playerStatsData.stats[0].splits[0].stat;\r\n\r\n                        //get the opponent from the team list\r\n                        let opponent = null;\r\n                        if (basicData) {\r\n                            opponent = this.getPlayerOpponent(basicData);\r\n                        }\r\n\r\n                        //add goalsPerGame and shotsPerGame to basic data\r\n                        basicData.goalsPerGame = (basicData.goals / basicData.gamesPlayed).toFixed(2);\r\n                        basicData.shotsPerGame = (basicData.shots / basicData.gamesPlayed).toFixed(2);\r\n                        player.fullName = fullName;\r\n                        player.shortName = firstName.substring(0, 1) + \" \" + lastName;\r\n\r\n                        let playerData = {\r\n                            firstName: player.firstName,\r\n                            lastName: player.lastName,\r\n                            fullName: player.firstName + \" \" + player.lastName,\r\n                            shortName : firstName.substring(0, 1) + \". \" + lastName,\r\n                            position: player.position,\r\n                            key: key,\r\n                            id: key,\r\n                            nhldata: basicData,\r\n                            statsdata: seasonStats,\r\n                            opponent: opponent\r\n                        };\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n\r\n                    }).catch((error) => {\r\n                        console.log(\"Player stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                    });\r\n\r\n                }).catch((error) => {\r\n                    console.log(\"Player search didn't work for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error)\r\n                });\r\n            });     \r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let display = <div>ok</div>\r\n\r\n        if (this.state.errorMessage) {\r\n            display = <div className=\"error-message\">{this.state.errorMessage}</div>\r\n        }\r\n        else if (this.state.loading) {\r\n            display = <div><img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"loading...\" /></div>\r\n        }\r\n        else {\r\n            display = <div><PlayerLists playerLists={this.state.playerLists} games={this.state.games} teams={this.state.teams}/></div>\r\n        }\r\n        return (display);\r\n    }\r\n}\r\n\r\nexport default TimmiesApp;","import './App.css';\r\nimport Container from 'react-bootstrap/Container'\r\nimport TimmiesApp from './TimmiesApp'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <link\r\n              rel=\"stylesheet\"\r\n              href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n              integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n              crossOrigin=\"anonymous\"\r\n          />\r\n          <header className=\"app-header\">\r\n            Tim Horton's Hockey Challenge Helper\r\n          </header>\r\n          <div>\r\n              <TimmiesApp />\r\n              <footer className=\"footer\" >\r\n                  Questions? Suggestions? Find me on <a href={\"//www.twitter.com/Zorbane\"} target=\"_blank\">Twitter</a>\r\n              </footer>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}