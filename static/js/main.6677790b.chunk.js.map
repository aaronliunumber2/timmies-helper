{"version":3,"sources":["paypal.png","PlayerList.js","PlayerLists.js","Warnings.js","TimmiesApp.js","Legend.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerList","columns","data","useTable","initialState","sortBy","id","desc","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","i","original","injury","postponed","getRowProps","cells","cell","c","getCellProps","PlayerLists","props","state","showList","clickHeader","bind","this","playerLists","length","setState","newShowList","show","set","href","onClick","e","Collapse","in","players","playerListColumns","Component","Warnings","showWarnings","clickHide","playerInjuries","postponedGamesWarning","postponedGames","game","teams","away","team","name","home","gamePK","injuries","player","status","ID","otherWarnings","warning","hideShow","TimmiesApp","timmiesAuthUrl","zorbaneProxyUrl","bridgedUrl","timmiesUrl","refreshToken","loading","games","errorMessage","currentSeason","currentSeasonFormatted","actualSeason","seasonType","currentView","trendGames","trendGamesInput","webInjuries","bearerToken","test","getBearerToken","loadTimmies","loadSetData","loadInjuryData","loadTeamData","getPlayerOpponent","getPlayerHomeAway","getTeamAbbreviation","getTimmiesAbbreviation","setOverallColumns","setTrendColumns","setTrendGames","adjustTrendGames","getLowerTrendGamesPlayed","getTOIFromPastGames","getValueFromPastGames","getGoalStreak","setCurrentView","setSeasonType","setSeason","getFormattedSeason","lastSeason","cookies","get","console","log","axios","post","then","response","AuthenticationResult","IdToken","catch","error","create","baseURL","withCredentials","teamLink","teamData","fullName","teamFullName","abbr","timmiesAbbr","teamAbbr","method","loadNHLGames","handled","code","timmiesData","timmiesGames","firstTimmiesGame","gameStartTime","Date","startTime","setHours","getHours","date","toISOString","slice","dates","filter","detailedState","sets","firstName","trim","lastName","jsonPlayer","playerNames","find","playerName","timmiesName","basicSearchLink","basicData","p","teamAbbrevs","key","playerId","playerData","shortName","substring","position","nhldata","opponent","goalsAgainstPerGame","newPlayerLists","playerList","playerIdLink","playerStatsData","people","seasonStats","stats","splits","stat","playerDataTeam","currentTeam","originalPlayerTeamName","includes","abbreviation","gameLogLink","gameLogSplits","homeaway","goalsPerGame","goals","gamesPlayed","toFixed","shotsPerGame","shots","statsdata","gamelogData","g","newInjuryList","selectedTeam","timmiesAbbreviation","playerTeamAbbr","playerTeam","skaterFullName","newOtherWarnings","Header","accessor","Cell","src","target","value","shootingPct","field","numGames","returnValue","maxGames","gameStats","parseInt","minutes","seconds","toiSplit","split","gameMinutes","gameSeconds","trendSeconds","finalMinutes","finalSeconds","Math","floor","toString","padStart","view","number","newTrendGames","newValue","Number","isInteger","season","seasonFormatted","path","display","alt","trendSettings","warnings","Button","variant","onChange","Dropdown","Toggle","Menu","Item","Legend","showLegend","App","showMessage","message","rel","integrity","crossOrigin","paypallogo","withCookies","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.6677790b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/paypal.1bdbe2bb.png\";","import React, { Component } from 'react'\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\n\r\nexport default function PlayerList({ columns, data }) {\r\n\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState:\r\n            {\r\n                sortBy: [\r\n                    {\r\n                        id: \"playerGoalsPerGame\",\r\n                        desc: true,\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        useSortBy\r\n    );\r\n\r\n\r\n\r\n    return(\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                className={\r\n                                    column.isSorted\r\n                                        ? column.isSortedDesc\r\n                                            ? \"sort-desc\"\r\n                                            : \"sort-asc\"\r\n                                        : \"\"\r\n                                }\r\n                            >{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr className={ (row.original.injury || row.original.postponed) ? \"injured-player\" : \"\" }{...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td c{...cell.getCellProps([{className: cell.column.className}])}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport { Collapse } from 'react-bootstrap'\r\nimport PlayerList from './PlayerList'\r\n\r\nclass PlayerLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showList: [],\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //initialize the showList array\r\n        let showList = [];\r\n        for (let i = 0; i < this.props.playerLists.length; i++) {\r\n            showList = [...showList, true];\r\n        }\r\n\r\n        this.setState({ showList });\r\n    }\r\n\r\n    clickHeader(id) {\r\n        //shallow copy of entire array\r\n        let newShowList = [...this.state.showList];\r\n        let show = newShowList[id - 1];\r\n        newShowList[id - 1] = !show;\r\n        this.setState({ showList : newShowList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {\r\n\r\n                        this.props.playerLists.map((set) => {\r\n                            return (\r\n                                <div className=\"player-list\" key={set.id}>\r\n                                    <h2 className='list-header' ><a href={\"#set\" + set.id} onClick={(e) => this.clickHeader(set.id)}>{(this.state.showList[set.id-1]) ? \"-\" : \"+\"}List {set.id}</a></h2>\r\n                                    <Collapse in={this.state.showList[set.id - 1]}>\r\n                                        <div className='stats-list' id={\"#set\" + set.id}>\r\n                                            <PlayerList data={set.players} columns={this.props.playerListColumns}/>\r\n                                        </div>\r\n                                    </Collapse>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default PlayerLists;","import React, { Component } from 'react'\r\n\r\nclass Warnings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showWarnings: true\r\n        };\r\n\r\n        this.clickHide = this.clickHide.bind(this);\r\n    }\r\n\r\n    clickHide() {\r\n        this.setState({ showWarnings: !this.state.showWarnings });\r\n    }\r\n\r\n\r\n    render() {\r\n        const postponedGamesWarning = this.props.postponedGames.map((game) =>\r\n            <div key={game.gamePK}>\r\n                POSTPONED: {game.teams.away.team.name} vs {game.teams.home.team.name}\r\n            </div>\r\n        )\r\n\r\n        let playerInjuries;\r\n        if (this.props.injuries) {\r\n            playerInjuries = this.props.injuries.map((injury) =>\r\n                <div key={injury.ID}>\r\n                    INJURY: {injury.player} - {injury.status} - {injury.injury}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const otherWarnings = this.props.otherWarnings.map((warning, i) =>\r\n            <div key={i}>\r\n                Warning: {warning}\r\n            </div>\r\n        )\r\n\r\n        const hideShow =\r\n            <div onClick={(e) => this.clickHide()}><a href=\"#\">{(this.state.showWarnings) ? \"(hide warnings)\" : \"(show warnings)\"}</a></div>\r\n\r\n        return (<div className=\"warnings\">\r\n            {this.state.showWarnings && postponedGamesWarning}\r\n            {this.state.showWarnings && playerInjuries}\r\n            {this.state.showWarnings && otherWarnings}\r\n            {((this.props.postponedGames.length > 0) || (this.props.injuries.length > 0) || (this.props.otherWarnings.length > 0)) && hideShow}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Warnings","import React, { Component } from 'react'\r\nimport { instanceOf } from \"prop-types\"\r\nimport PlayerLists from './PlayerLists'\r\nimport Warnings from './Warnings';\r\nimport teamData from './data/teams.json'\r\nimport playerNames from './data/playerNames.json'\r\nimport axios from 'axios'\r\nimport { Button, Dropdown } from 'react-bootstrap'\r\n\r\nclass TimmiesApp extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }],\r\n            games: null,\r\n            teams : [],\r\n            errorMessage: \"\",\r\n            currentSeason: \"20222023\",\r\n            currentSeasonFormatted: \"2022-2023\",\r\n            actualSeason: \"20222023\",\r\n            seasonType: \"regular\",\r\n            currentView: \"overall\",\r\n            trendGames: 5,\r\n            trendGamesInput : 5,\r\n            playerListColumns: null,\r\n            postponedGames : null,\r\n            playerInjuries: [],\r\n            webInjuries: null,\r\n            bearerToken: \"\",\r\n            test: \"eyJraWQiOiI2MkY1WVArTnZlZVFaVkhjak50bGh1UmJmU3R3bEhYTnNBMlo0TEVIZnd3PSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0Yzk2NWRjYS1hYTk1LTQzZDUtYTdmZS1jNDc2NDFmN2M1MDgiLCJhdWQiOiIzZm10bm9rbXB0cTRsM3E3cGZoYW00bzJmbiIsImV2ZW50X2lkIjoiZDAzODdhYTQtY2ZlMS00NDlkLTkwYWYtYzc5ZGJkODg1MGI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MzQ1MzI2NDQsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX2RXTGRvenhGeiIsImNvZ25pdG86dXNlcm5hbWUiOiI0Yzk2NWRjYS1hYTk1LTQzZDUtYTdmZS1jNDc2NDFmN2M1MDgiLCJleHAiOjE2MzQ1MzYyNDUsImlhdCI6MTYzNDUzMjY0NSwiZW1haWwiOiJ6b3JiYW5lQGdtYWlsLmNvbSJ9.EtAG4kIvllRnW6g_vcvsMlP50dckyfawV4DWIXtsa6RC9XMXYPjHW7_A-NyVPXf_kbdszzSrB0-uLEgLJ4iE3a_GqgK8lEjNZwTXEr6sBY5LRDhURqudfItQWLi7Zs3GveMEBaXRdyoFfYIxBMahhoQxKB3td4BR8TYRQqPWjAeqqKsfIhucMbNyrfkJc0AJKKwAa65SWHR51ulnjNVL9HlwPehb758ksbJd_SYjOf0eP9Dj71BMQOz1nTU5apHZAhf26xDTEbi4XIpD8Uy7MAp45JjIxzcVX-TV1yEh8sKf1myQR-lX4Vl1wuN66_Vtpw2BRNhFbaKymKwD2WxpNQ\",\r\n            otherWarnings : [],\r\n        }     \r\n\r\n\r\n        this.getBearerToken = this.getBearerToken.bind(this);\r\n        //this.getPastebinBearer = this.getPastebinBearer.bind(this);\r\n        this.loadTimmies = this.loadTimmies.bind(this);\r\n        this.loadSetData = this.loadSetData.bind(this);\r\n        this.loadInjuryData = this.loadInjuryData.bind(this);\r\n        this.loadTeamData = this.loadTeamData.bind(this);\r\n\r\n        this.getPlayerOpponent = this.getPlayerOpponent.bind(this);\r\n        this.getPlayerHomeAway = this.getPlayerHomeAway.bind(this);\r\n        this.getTeamAbbreviation = this.getTeamAbbreviation.bind(this);\r\n        this.getTimmiesAbbreviation = this.getTimmiesAbbreviation.bind(this);\r\n\r\n        this.setOverallColumns = this.setOverallColumns.bind(this);\r\n        this.setTrendColumns = this.setTrendColumns.bind(this);\r\n        this.setTrendGames = this.setTrendGames.bind(this);\r\n\r\n        this.adjustTrendGames = this.adjustTrendGames.bind(this);\r\n        this.getLowerTrendGamesPlayed = this.getLowerTrendGamesPlayed.bind(this);\r\n        this.getTOIFromPastGames = this.getTOIFromPastGames.bind(this);\r\n        this.getValueFromPastGames = this.getValueFromPastGames.bind(this);\r\n        this.getGoalStreak = this.getGoalStreak.bind(this);\r\n\r\n        this.setCurrentView = this.setCurrentView.bind(this);\r\n        this.setSeasonType = this.setSeasonType.bind(this);\r\n        this.setSeason = this.setSeason.bind(this);\r\n        this.getFormattedSeason = this.getFormattedSeason.bind(this);\r\n\r\n    }\r\n\r\n    timmiesAuthUrl = \"https://cognito-idp.us-east-1.amazonaws.com/\";\r\n    zorbaneProxyUrl = \"https://proxy-zorbane.herokuapp.com/\";\r\n    bridgedUrl = \"https://cors.bridged.cc/\";\r\n    timmiesUrl = \"https://px-api.rbi.digital/hockeyprod/picks\";    \r\n    refreshToken = \"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.fdIWv7uAIVoLsRY6PJEomm_Y1KvlVqAm2e8DQjuONG9ptWnry0QsQYDFjRBhz8BJeJDISwlu3H2r1Ng6OMKNvb-a2bR8zrR0ad0WdrTVzzZZ3o18WVCJ2BobWt2qeprT83AT_RMrEFz3vO4JOe95EyIWoVI3ZGL_p7b1GBcSonLMdiKi1bL9IgDyxGoz6ycsOSSq0IiqIgkp8zrkpnxzTXjCnD3Xe-o3RbLhVrT7r3uEYGAcuyjBZAoekfPy_4EEsxf_CioDbCxxPgWdEIEc9H-y4ulFHTCAqAKPovP6IV4amUlXSy79I4DUbv281DC3PF-0jG6vHEZyWkRo4_fqPw.jz-wyeVdOqQBvMTt.fE5sRYpQ57hbEcWcXDUhaEF457YUgSbKZPZfPBughh90s484emkVkcL3NHRze3koB-mQ1GmCfnCEPRt2T1DU3k4brsW6yQy91Y_2PNITbpoDwHTHJAMvwdHOIC6uMpLbXNOlrMO4gpk1kVWZ3EgxE9oF7dypEki-MN5uc-uD5fvkBzvKK-2TNUXfNjetvr6yVoEG5Ptm_g1XwSAurQfXJ4D7ubkJw_DGaMJau6B6wlpBunZGKrvBcONieEESujZCQFvafUJFU0OxLU6hbOH4B6d3LYvm-3yT6BPg4U147BX6aC3g7PykFc3XfMF1GyuY0mpsPQydlDHsv6IDqxHlQLvk2GF3zHiCqq8YLxQm05RxYqARs1o5ux-WIaKnbzP7m6lUR0gYVfsx7YEjs4t6TBTBdnOSDPtVZScGvd1bjO4e4pC6h10YXxadbkWhuNcwS3LfOnrPYnfXfl6IesOrWnOLO2JX1IUGmdB9C7bbOPwZWk36tlpWzyXY6OWdjldtLtDhdxgTLN-0cjKBCcfQMRa1XH9dH4kUAr_jGnyltKbK4Wf8GLSpv5cMXNirNfWZcf52Vt_eW5BPI_yMTKPWDNMCtJyFG_XMdoq1m92ZqQ41nh-v7mN4m0H5EsRg-oZbA4a9pfQa64-8LXChZsbawE1Hj8Eje8b09krE-ABdZefjfvc7Ty6ibnPaEtbl7sJUBG3WXVNckz2uoTSdvGOyMEzuYFoynI6p6K63cBfOKb1z3Ctx5LdasXrM6ZFYMWgngZ9SLTwoXY-hZMRSSlGFI0crZOAG3RQI01u9x_oOGMJMaxBYfU9GGMhEBurlxgPl69HYFl_6Ii_DzNF82X7n05MYGe7XPP447MTc4jueg3_P9Kz7VMgmfTwtL1tZ9FDfVArs3r_55WN6rTpMasYHUSIMhE2suDpNeSsA2SxoPNT-9qf-0C6uaXkp0btJfAcloUCE8LLh6S4FV7M6DzmArozL6oSQ1xhIB7dBhnPPRGNzkMDUX0VZph6YZfbESs8DL79qd3zrOMlH-F1UNBkYtWi66pSUq81cfFNmYzY44hzhD0YGtbQMelPVh3gZ0PWFXtOFcn8MLEbNCKEcoRrFKsGPsGi1yLndQRLnuODJSmZMXbZpm_U8QlowzakmTc-IGpkI9yxEOu9T7GJELpWjO9BqT_rh6ZLNmJ96qv5YXzlLP6DwPIBgOCL0yUf3LMYCDriJL3n_3L-4a0uT9k_o0epYjwjHVquLm4S7DTqEX36FRxhdpHppQPI5BAIh1jsIHCZrDbu3Eu5L1f8KTnUKYJv5FJmrXPts4It0DiNh_4bqKEPeXiQuuLYZEA.EAfqedBF9UrRwz4WKUW1FQ\";\r\n\r\n    componentDidMount() {\r\n        const { cookies } = this.props;\r\n        const lastSeason = cookies.get(\"lastSeason\");\r\n        this.setOverallColumns();\r\n        if (!lastSeason || lastSeason === this.state.currentSeason) {\r\n            this.getBearerToken();\r\n        }\r\n        else {\r\n            console.log(\"last season is \" + lastSeason)\r\n            this.setSeason(lastSeason)\r\n        }\r\n    }\r\n\r\n    getBearerToken() {\r\n        const data = { \"ClientId\": \"3fmtnokmptq4l3q7pfham4o2fn\", \"AuthFlow\": \"REFRESH_TOKEN_AUTH\", \"AuthParameters\": { \"REFRESH_TOKEN\": this.refreshToken, \"DEVICE_KEY\": null } };\r\n        const headers = {\r\n            \"accept\": \"*/*\",\r\n            \"accept-language\": \"en-US,en;q=0.9\",\r\n            \"cache-control\": \"max-age=0\",\r\n            \"content-type\": \"application/x-amz-json-1.1\",\r\n            \"x-amz-target\": \"AWSCognitoIdentityProviderService.InitiateAuth\",\r\n            \"x-amz-user-agent\": \"aws-amplify/0.1.x js\"\r\n        };\r\n        const promise = axios.post(\r\n            this.zorbaneProxyUrl + this.timmiesAuthUrl,\r\n            data,\r\n            { headers }\r\n        );\r\n\r\n        promise.then((response) => {\r\n            this.setState({ bearerToken: response.data.AuthenticationResult.IdToken }, this.loadInjuryData());\r\n        })\r\n            .catch((error) => {\r\n                this.setState({ errorMessage: \"Sorry!  Unable to authenticate with Tim Hortons.  Please try again later.\" });\r\n            });\r\n    }\r\n\r\n    //getPastebinBearer() {\r\n    //    const bearerGet = axios.create({\r\n    //        baseURL: this.zorbaneProxyUrl + \"https://pastebin.com/raw/VL2VpYjq\",\r\n    //        headers: {\r\n    //            \"pragma\": \"no-cache\",\r\n    //            \"cache-control\": \"no-cache\",\r\n    //            \"expires\" : 0,\r\n    //        }\r\n    //    });\r\n    //    const promise = bearerGet.get();\r\n    //    promise.then((response) => {\r\n    //        this.setState({ bearerToken: response.data },this.loadInjuryData());\r\n    //    })\r\n    //        .catch((error) => {\r\n    //            this.loadInjuryData()\r\n    //        });\r\n    //}\r\n\r\n    loadInjuryData() {\r\n        const injuryGet = axios.create({\r\n            baseURL: this.zorbaneProxyUrl + \"https://www.rotowire.com/hockey/tables/injury-report.php?team=ALL&pos=ALL\",\r\n            withCredentials: false,\r\n            headers: {\r\n                \"X-Requested-With\" : \"*\",\r\n            }\r\n        });\r\n        const promise = injuryGet.get();\r\n        promise.then((response) => {\r\n            this.setState({ webInjuries: response.data }, () => this.loadTeamData());\r\n        })\r\n            .catch((error) => {\r\n                this.loadTeamData()\r\n            });\r\n    }\r\n\r\n\r\n    loadTeamData() {\r\n        let teamLink = this.zorbaneProxyUrl + \"https://api.nhle.com/stats/rest/en/team/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22points%22,%22direction%22:%22DESC%22%7D,%7B%22property%22:%22wins%22,%22direction%22:%22DESC%22%7D%5D&start=0&limit=50&factCayenneExp=gamesPlayed%3E=1&cayenneExp=gameTypeId=\"\r\n        if (this.state.seasonType === \"playoffs\") {\r\n            teamLink +=  \"3\";\r\n        }\r\n        else {\r\n            teamLink += \"2\";\r\n        }\r\n        teamLink += \"%20and%20seasonId%3C=\" + this.state.actualSeason + \"%20and%20seasonId%3E=\" + this.state.actualSeason;\r\n        let instance = axios.create({\r\n            baseURL: teamLink,\r\n            withCredentials: false,\r\n            headers: {\r\n                \"X-Requested-With\": \"*\",\r\n            }\r\n        });\r\n        const promise = instance.get();\r\n        promise.then((response) => {\r\n\r\n            //go through each team and set it's abbreviation\r\n            let teamData = response.data.data;\r\n            for (let i = 0; i < teamData.length; i++) {\r\n                let fullName = teamData[i].teamFullName;                \r\n                let abbr = this.getTeamAbbreviation(fullName);\r\n                let timmiesAbbr = this.getTimmiesAbbreviation(fullName);\r\n                \r\n                teamData[i].teamAbbr = abbr;\r\n                if (timmiesAbbr) {\r\n                    teamData[i].timmiesAbbr = timmiesAbbr;\r\n                }\r\n                else {\r\n                    teamData[i].timmiesAbbr = abbr;\r\n                }\r\n            }\r\n            //also reset the player list and load timmies\r\n            this.setState({ teams: teamData, playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }] }, this.loadTimmies());\r\n\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(\"Unable to get team stats from NHL website. Error: \" + error)\r\n            this.setState({ errorMessage: \"Sorry!  Unable to load data from the NHL website.  Please try again later.\" });\r\n                });\r\n    }\r\n\r\n    loadTimmies() {\r\n        let timmiesUrl = this.zorbaneProxyUrl + this.timmiesUrl;\r\n        const timmiesGet = axios.create({\r\n            baseURL: timmiesUrl, \r\n            method: \"get\",\r\n            headers: {\r\n                \"pragma\": \"no-cache\",\r\n                \"cache-control\": \"no-cache\",\r\n                \"authorization\": \"Bearer \" + this.state.bearerToken,\r\n                \"accept\": \"application/json, text/plain, */*\",\r\n                \"x-cognito-id\": \"us-east-1:00cc6e37-18ae-4cb7-9e7f-41e0be1924c6\",\r\n                \"accept-language\": \"en-CA,en;q=0.9\"\r\n            }\r\n        });\r\n        const promise = timmiesGet.get();\r\n        promise.then((response) => {\r\n            this.loadNHLGames(response.data);\r\n        })\r\n            .catch((error) => {\r\n                let handled = false;\r\n                if (error.response) {\r\n                    console.log(error.response.status);\r\n                    console.log(error.response.data);\r\n                    if (error.response.status === 404) {\r\n                        if (error.response.data.code) {\r\n                            if (error.response.data.code === \"noContest\") {\r\n                                this.setState({ errorMessage: \"Take a break!  No games today.\" });\r\n                                handled = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (!handled) {\r\n                    console.log(error);\r\n                    this.setState({ errorMessage: \"Sorry!  Unable to load Tims Hockey Challenge Data.  Please try again later.\" });\r\n                }\r\n            });\r\n    }\r\n\r\n    loadNHLGames(timmiesData) {\r\n\r\n        let timmiesGames = timmiesData.games;\r\n\r\n        if (timmiesGames.length > 0) {\r\n            let firstTimmiesGame = timmiesGames[0];\r\n            let gameStartTime = new Date(firstTimmiesGame.startTime);\r\n            gameStartTime.setHours(gameStartTime.getHours() - 7); //pacific time\r\n            //let date = gameStartTime.substring(0, gameStartTime.indexOf(\"T\"));\r\n            //let date = gameStartTime.getFullYear() + \"-\" + gameStartTime.get().toString().padStart(2, \"0\") + \"-\" + gameStartTime.getDay().toString().padStart(2, \"0\");\r\n            let date = gameStartTime.toISOString().slice(0, 10);\r\n            const nhlGamesGet = axios.create({\r\n                baseURL: this.zorbaneProxyUrl + \"https://statsapi.web.nhl.com/api/v1/schedule?date=\" + date,\r\n                withCredentials: false,\r\n                headers: {\r\n                    \"X-Requested-With\": \"*\",\r\n                }\r\n            });\r\n            const nhlGamespromise = nhlGamesGet.get();\r\n            nhlGamespromise.then((response) => {\r\n\r\n                //go through and check if there are postponed games\r\n                const games = response.data.dates[0].games;\r\n                let postponedGames = games.filter(game => game.status.detailedState === \"Postponed\");\r\n\r\n                this.setState({ loading: false, games: games, postponedGames : postponedGames }, ()=> this.loadSetData(timmiesData.sets));\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    this.setState({ errorMessage: \"Sorry!  Unable to load game day schedule from NHL website.  Please try again later.\" });\r\n                });\r\n        }\r\n        else {\r\n            this.setState({ errorMessage: \"No games today!\" });\r\n        }\r\n    }\r\n\r\n    //this is where all the players data gets loaded through multiple requests\r\n    loadSetData(sets) {\r\n        //empty out the players\r\n        sets.map((set) => {\r\n            set.players.map((player) => {\r\n                //we want to see if we can find the player in the player.json table which means the tims name and nhl name do not match\r\n                let firstName = player.firstName.trim();\r\n                let lastName = player.lastName.trim();\r\n                let fullName = firstName + \" \" + lastName;\r\n                let jsonPlayer = playerNames.players.find(playerName => playerName.timmiesName === fullName);\r\n                if (jsonPlayer) {\r\n                    firstName = jsonPlayer.firstName;\r\n                    lastName = jsonPlayer.lastName;\r\n                    console.log(\"Found timmies player \" + fullName + \". Renamed to \" + firstName + \" \" + lastName);\r\n                }\r\n\r\n\r\n\r\n\r\n                //get basic nhl data\r\n                let basicSearchLink = this.zorbaneProxyUrl + \"https://api.nhle.com/stats/rest/en/skater/summary?cayenneExp=gameTypeId=\";\r\n                if (this.state.seasonType === \"playoffs\") {\r\n                    basicSearchLink += \"3\";                    \r\n                }\r\n                else {\r\n                    basicSearchLink += \"2\";\r\n                }\r\n                basicSearchLink += \"%20and%20seasonId%3C=\" + this.state.currentSeason + \"%20and%20seasonId%3E=\" + this.state.currentSeason + \"%20and%20skaterFullName%20likeIgnoreCase%20%22%25\" + firstName + \"%20\" + lastName + \"%25%22\";\r\n                let basicSearch = axios.create({\r\n                    baseURL: basicSearchLink,\r\n                    withCredentials: false,\r\n                    headers: {\r\n                        \"X-Requested-With\": \"*\",\r\n                    }\r\n                });\r\n                const basicPromise = basicSearch.get();\r\n                basicPromise.then((response) => {\r\n                    let basicData = response.data.data[0];\r\n                    if (response.data.data.length > 1) {\r\n                        if (player.lastName === \"Aho\") {\r\n                            basicData = response.data.data.find(p => p.teamAbbrevs === \"CAR\");\r\n                        }\r\n                    }\r\n\r\n                    let key = player.firstName + player.lastName;\r\n                    if (basicData) {\r\n                        key = basicData.playerId;\r\n                    }\r\n                    else {\r\n                        //if we can't find the nhl player just add it but with placeholder fake data\r\n                        let fakenhldata = { teamAbbrevs: \"nhl\" }\r\n                        let fakeopponent = { teamAbbr : \"nhl\", goalsAgainstPerGame : 0}\r\n                        let playerData = { firstName: player.firstName, lastName: player.lastName, shortName: firstName.substring(0, 1) + \". \" + lastName, position: player.position, key: key, nhldata : fakenhldata, opponent : fakeopponent};\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n                    }\r\n\r\n\r\n                    let playerIdLink = this.zorbaneProxyUrl + \"https://statsapi.web.nhl.com/api/v1/people/\";\r\n                    playerIdLink = playerIdLink + key;\r\n                    playerIdLink = playerIdLink + \"?expand=person.stats&stats=\";\r\n                    if (this.state.seasonType === \"playoffs\") {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeasonPlayoffs\";\r\n                    }\r\n                    else {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeason\";\r\n                    }\r\n                    playerIdLink = playerIdLink + \"&season=\" + this.state.currentSeason;\r\n\r\n                    let playerSearch = axios.create({\r\n                        baseURL: playerIdLink,\r\n                        withCredentials: false,\r\n                        headers: {\r\n                        }\r\n                    });\r\n\r\n                    const playerSearchPromise = playerSearch.get();\r\n                    playerSearchPromise.then((response) => {\r\n                        let playerStatsData = response.data.people[0];\r\n\r\n                        //get the correct stats from the playerStats and that is a new object in player\r\n                        let seasonStats = playerStatsData.stats[0].splits[0].stat;\r\n\r\n\r\n                        let playerDataTeam = playerStatsData.currentTeam.name;\r\n                        let originalPlayerTeamName = playerStatsData.currentTeam.name;\r\n                        //montreal canadiens has an accent, problem finding it in the json\r\n                        if (playerDataTeam.includes(\"Canadiens\")) {\r\n                            playerDataTeam = \"Montreal Canadiens\";\r\n                        }\r\n\r\n                        let team = teamData.teams.find(team => team.fullName === playerDataTeam);\r\n                        if (team != null) {\r\n                            //change the player's team to the current team based on playerstats data (that is more accurate than the summary search)\r\n                            basicData.teamAbbrevs = team.abbreviation;\r\n                        }\r\n                        else {\r\n                            console.log(\"Could not find team \" + playerDataTeam);\r\n                        }\r\n                        \r\n\r\n                        //game log search\r\n                        let gameLogLink = this.zorbaneProxyUrl + \"https://statsapi.web.nhl.com/api/v1/people/\"\r\n                        gameLogLink += key;\r\n                        gameLogLink += \"/stats?stats=\";\r\n                        if (this.state.seasonType === \"playoffs\") {\r\n                            gameLogLink += \"playoffGameLog\"\r\n                        }\r\n                        else {\r\n                            gameLogLink += \"gameLog\";\r\n                        }\r\n                        gameLogLink += \"&expand=stats.team & season=\";\r\n                        gameLogLink += this.state.currentSeason;\r\n                        let gameLogSearch = axios.create({\r\n                            baseURL: gameLogLink,\r\n                            withCredentials: false,\r\n                            headers: {\r\n                                \"X-Requested-With\": \"*\",\r\n                            }\r\n                        });\r\n\r\n                        const gameLogPromise = gameLogSearch.get();\r\n                        gameLogPromise.then((response) => {\r\n                            let gameLogSplits = response.data.stats[0].splits;\r\n\r\n                            //formatted/custom data\r\n                            //get the opponent from the team list\r\n                            let opponent = null;\r\n                            let homeaway = null;\r\n                            if (basicData) {\r\n                                opponent = this.getPlayerOpponent(basicData);\r\n                                homeaway = this.getPlayerHomeAway(basicData);\r\n                            }\r\n\r\n                            //add goalsPerGame and shotsPerGame to basic data\r\n                            basicData.goalsPerGame = (basicData.goals / basicData.gamesPlayed).toFixed(2);\r\n                            basicData.shotsPerGame = (basicData.shots / basicData.gamesPlayed).toFixed(2);\r\n                            player.fullName = fullName;\r\n                            player.shortName = firstName.substring(0, 1) + \" \" + lastName;\r\n\r\n                            let playerData = {\r\n                                firstName: player.firstName,\r\n                                lastName: player.lastName,\r\n                                fullName: player.firstName + \" \" + player.lastName,\r\n                                shortName: firstName.substring(0, 1) + \". \" + lastName,\r\n                                position: player.position,\r\n                                key: key,\r\n                                id: key,\r\n                                nhldata: basicData,\r\n                                statsdata : seasonStats,\r\n                                gamelogData: gameLogSplits,\r\n                                opponent: opponent,\r\n                                homeaway: homeaway,\r\n                            };\r\n\r\n                            //shallow copy of entire array\r\n                            let newPlayerLists = [...this.state.playerLists];\r\n                            let playerList = newPlayerLists[set.id - 1];\r\n                            playerList.players = [...playerList.players, playerData]\r\n\r\n                            //see if the player is injured\r\n                            if (this.state.webInjuries && !this.state.playerInjuries.find((p) => p.player === playerData.fullName)) { //it may be null if this call failed and that is OK\r\n                                let injury = this.state.webInjuries.find((injury) => injury.player === playerData.fullName);\r\n                                if (injury && playerData.fullName != 'Sebastian Aho') {\r\n                                    playerData.injury = injury;\r\n                                }\r\n                            }\r\n\r\n                            //see if the player is in a postponed game\r\n                            if (this.state.postponedGames) {\r\n                                if ((this.state.postponedGames.find((g) => g.teams.away.team.name === originalPlayerTeamName) ||\r\n                                    this.state.postponedGames.find((g) => g.teams.home.team.name === originalPlayerTeamName))\r\n                                    //ok so now we know this player's team is in a postponed game but maybe their team is still playing a different game\r\n                                    && (!this.state.games.find((g) => g.teams.away.team.name === originalPlayerTeamName && g.status.detailedState != \"Postponed\") &&\r\n                                        !this.state.games.find((g) => g.teams.home.team.name === originalPlayerTeamName && g.status.detailedState != \"Postponed\"))) {\r\n                                    console.log(\"postponed game for \" + playerData.fullName);\r\n                                    playerData.postponed = true;\r\n                                }                                \r\n                            }\r\n\r\n                            if (playerData.injury) {\r\n                                let newInjuryList = [...this.state.playerInjuries, playerData.injury];\r\n                                this.setState({ playerLists: newPlayerLists, playerInjuries: newInjuryList });\r\n                            }\r\n                            else {\r\n                                this.setState({ playerLists: newPlayerLists });\r\n                            }\r\n                        }).catch((error) => {\r\n                            console.log(\"Game log stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                        });\r\n\r\n                    }).catch((error) => {\r\n                        console.log(\"Player stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                    });\r\n\r\n                }).catch((error) => {\r\n                    console.log(\"Player search didn't work for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error)\r\n                });\r\n            });\r\n        });\r\n    }    \r\n\r\n    getTeamAbbreviation(teamFullName) {      \r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        return selectedTeam ? selectedTeam.abbreviation : \"MTL\"; //if it can't find it, its because of special character in montreal\r\n    }\r\n    \r\n    getTimmiesAbbreviation(teamFullName) {\r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        if (selectedTeam) {\r\n            return selectedTeam.timmiesAbbreviation ? selectedTeam.timmiesAbbreviation : \"\";\r\n        }\r\n    }\r\n\r\n    getPlayerHomeAway(basicData) {\r\n        let homeaway = null;\r\n        if (basicData) {\r\n            let playerTeamAbbr = basicData.teamAbbrevs;\r\n            let playerTeam = this.state.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n            if (playerTeam) {\r\n\r\n                let game;\r\n                game = this.state.games.find(game => game.teams.home.team.name === playerTeam.teamFullName || game.teams.away.team.name === playerTeam.teamFullName);\r\n                if (game) {\r\n                    if (game.teams.home.team.name === playerTeam.teamFullName) {\r\n                        homeaway = \"Home\";\r\n                    }\r\n                    else {\r\n                        homeaway = \"Away\";\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Can't find player team for player \" + basicData.skaterFullName + \" Team: \" + playerTeamAbbr);\r\n            }\r\n        }\r\n\r\n        return homeaway;\r\n    }\r\n\r\n    getPlayerOpponent(basicData) {\r\n        let opponent = null;\r\n        if (basicData) {\r\n            let playerTeamAbbr = basicData.teamAbbrevs;\r\n            let playerTeam = this.state.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n            if (playerTeam) {\r\n\r\n                let game;\r\n                game = this.state.games.find(game => game.teams.home.team.name === playerTeam.teamFullName || game.teams.away.team.name === playerTeam.teamFullName);\r\n                if (game) {\r\n                    if (game.teams.home.team.name === playerTeam.teamFullName) {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.away.team.name);\r\n                    }\r\n                    else {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.home.team.name);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(\"Can't find game for player \" + basicData.skaterFullName);\r\n                    let newOtherWarnings = [...this.state.otherWarnings, basicData.skaterFullName + \" - Unable to find game.\"];\r\n                    this.setState({ otherWarnings: newOtherWarnings });\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Can't find player team for player \" + basicData.skaterFullName + \" Team: \" + playerTeamAbbr);\r\n            }\r\n        }\r\n\r\n        if (!opponent) {\r\n            opponent = { teamAbbr: \"nhl\", goalsAgainstPerGame: 0 };\r\n        }\r\n        return opponent;\r\n    }\r\n\r\n    setOverallColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },                     {\r\n                        Header: \"GP\",\r\n                        id: \"playerGames\",\r\n                        accessor: \"nhldata.gamesPlayed\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: \"nhldata.goals\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: \"nhldata.shotsPerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shoot%\",\r\n                        id: \"playerShootingPercentage\",\r\n                        accessor: (row) => { return (row.nhldata.shootingPct * 100).toFixed(1) },\r\n                        //cell : (props) => { return (props.value * 100).toFixed(1) },\r\n                        className: \"long-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: \"statsdata.powerPlayTimeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: \"statsdata.timeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: \"nhldata.goalsPerGame\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"H/A\",\r\n                        id: \"playerHomeaway\",\r\n                        accessor: \"homeaway\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Opp.GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    setTrendColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Games\",\r\n                        id: \"games\",\r\n                        accessor: (row) => this.getLowerTrendGamesPlayed(row, this.state.trendGames),\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: (row) => { return this.getValueFromPastGames(row, \"goals\", this.state.trendGames) },\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"shots\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"long-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"Shoot%\",\r\n                        id: \"playerShootingPercentage\",\r\n                        accessor: (row) => { return ((this.getValueFromPastGames(row, \"goals\", this.state.trendGames) / this.getValueFromPastGames(row, \"shots\", this.state.trendGames)) * 100).toFixed(1);  },\r\n                        className: \"long-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"powerPlayTimeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"timeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"goals\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"short-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"H/A\",\r\n                        id: \"playerHomeaway\",\r\n                        accessor: \"homeaway\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Opp.Season GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    getValueFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let returnValue = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames -1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            returnValue += parseInt(gameStats[field]);\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    getTOIFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let minutes = 0;\r\n        let seconds = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames - 1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            let toiValue = gameStats[field];\r\n            let toiSplit = toiValue.split(\":\");\r\n            let gameMinutes = toiSplit[0];\r\n            let gameSeconds = toiSplit[1];\r\n\r\n            minutes += parseInt(gameMinutes);\r\n            seconds += parseInt(gameSeconds);\r\n        }\r\n\r\n        let trendOrGamesPlayed = this.getLowerTrendGamesPlayed(player, numGames);\r\n        let totalSeconds = seconds + (minutes * 60);\r\n        let trendSeconds = totalSeconds / trendOrGamesPlayed;\r\n        let finalMinutes = trendSeconds / 60;\r\n        let finalSeconds = trendSeconds % 60;\r\n\r\n        return Math.floor(finalMinutes) + \":\" + Math.floor(finalSeconds).toString().padStart(2, \"0\");\r\n    }\r\n\r\n    getGoalStreak(player) {\r\n        var gamelog = player.gamelogData;\r\n        var streak = 0;\r\n        \r\n        if (gamelog.length > 0) {\r\n            //check the first one to see if they scored or not.  If they did start at 1, if they didn't be negative 1\r\n        }\r\n\r\n        return streak;\r\n    }\r\n\r\n    getGoalsPerGameVsOpponent(player) {\r\n        var opponent = player.opponent;\r\n        var gamelog = player.gamelogData;\r\n        var goals = 0;\r\n        if (gamelog.length > 0) {\r\n\r\n        }\r\n        return goals;\r\n    }\r\n\r\n    setCurrentView(view) {\r\n        if (view != this.state.currentView) {\r\n            this.setState({ currentView: view }, () => { if (view === \"trend\") this.setTrendColumns(); else this.setOverallColumns() });\r\n        }\r\n    }\r\n\r\n    getLowerTrendGamesPlayed(player, numGames) {\r\n        return numGames < player.nhldata.gamesPlayed ? numGames : player.nhldata.gamesPlayed\r\n    }\r\n\r\n    adjustTrendGames(number) {\r\n        let newTrendGames = parseInt(this.state.trendGames) + parseInt(number);\r\n\r\n        if (newTrendGames > 0) {\r\n            this.setTrendGames(newTrendGames);\r\n        }\r\n    }\r\n\r\n    setTrendGames(number) {\r\n        const newValue = parseInt(number);\r\n\r\n        if (Number.isInteger(newValue)) {\r\n            if (newValue > 0) {\r\n                this.setState({ trendGamesInput: newValue, trendGames: newValue }, () => this.setTrendColumns());\r\n            }\r\n        }\r\n        else {\r\n            //special rule for empty, allow it but it won't set the actual trend games state\r\n            if (number === \"\") {\r\n                this.setState({ trendGamesInput: number });\r\n            }\r\n        }\r\n    }\r\n\r\n    setSeasonType(season) {\r\n        if (season != this.state.seasonType) {\r\n            this.setState({ seasonType: season }, () => this.getBearerToken());\r\n        }\r\n    }\r\n\r\n    setSeason(season) {\r\n        if (season != this.state.currentSeason) {\r\n            let seasonFormatted = this.getFormattedSeason(season);\r\n            this.props.cookies.set(\"lastSeason\", season, { path: \"/\" });\r\n            this.setState({ currentSeason: season, currentSeasonFormatted: seasonFormatted }, () => this.getBearerToken());\r\n        }\r\n    }\r\n\r\n    getFormattedSeason(season) {\r\n        let seasonFormatted = season.substring(0, 4) + \"-\" + season.substring(4, 8);\r\n        return seasonFormatted;\r\n    }\r\n\r\n    render() {\r\n        let display = <div>ok</div>\r\n\r\n        if (this.state.errorMessage) {\r\n            display = <div className=\"error-message\">{this.state.errorMessage}</div>\r\n        }\r\n        else if (this.state.loading) {\r\n            display = <div><img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"loading...\" /></div>\r\n        }\r\n        else {\r\n            let trendSettings;\r\n            if (this.state.currentView === \"trend\") {\r\n                trendSettings = <div className=\"trend-settings\"><Button variant=\"light\" onClick={() => this.adjustTrendGames(-1)}>-</Button>Last <input className=\"trend-games\" value={this.state.trendGamesInput} onChange={(e) => { this.setTrendGames(e.target.value); }} /> Games<Button variant=\"light\" onClick={() => this.adjustTrendGames(1)}>+</Button></div>\r\n            }\r\n            let warnings;\r\n            if (this.state.postponedGames || this.state.playerInjuries) {\r\n                warnings = <Warnings postponedGames={this.state.postponedGames} injuries={this.state.playerInjuries} otherWarnings={this.state.otherWarnings} />\r\n            }\r\n            display =\r\n                <div>\r\n                {warnings}\r\n                <div className=\"settings-buttons\"><Button onClick={(e) => this.setSeasonType(\"regular\")} variant={this.state.seasonType === \"regular\" ? \"dark\" : \"light\"}>Regular Season</Button><Button onClick={(e) => this.setSeasonType(\"playoffs\")} variant={this.state.seasonType === \"playoffs\" ? \"dark\" : \"light\"}>Playoffs</Button></div>\r\n                <div>\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"season-dropdown\">\r\n                            {this.state.currentSeasonFormatted}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"season-dropdown\" >\r\n                            <Dropdown.Item onClick={() => this.setSeason(\"20212022\")}>2021-2022</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.setSeason(\"20222023\")}>2022-2023</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n                <div className=\"settings-buttons\"><Button onClick={(e) => this.setCurrentView(\"overall\")} variant={this.state.currentView === \"overall\" ? \"dark\" : \"light\"}>Overall</Button><Button onClick={(e) => this.setCurrentView(\"trend\")} variant={this.state.currentView === \"trend\" ? \"dark\" : \"light\"}>Trend</Button></div>\r\n                {trendSettings}                \r\n                <PlayerLists playerLists={this.state.playerLists} games={this.state.games} teams={this.state.teams} playerListColumns={this.state.playerListColumns} />\r\n                </div>\r\n        }\r\n        return (display);\r\n    }\r\n}\r\n\r\nexport default TimmiesApp;","import React, { Component } from 'react'\r\nimport { Collapse } from 'react-bootstrap'\r\n\r\nclass Legend extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showLegend: false\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n    clickHeader() {\r\n        this.setState({ showLegend: !this.state.showLegend });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"legend\" id=\"legend\">\r\n                <div onClick={(e) => this.clickHeader()}><a href=\"#legend\">Legend</a></div>\r\n                <Collapse in={this.state.showLegend} >\r\n                    <div className=\"legend-content\">\r\n                        Pos - Position<br />\r\n                        GP - Games Played<br />\r\n                        G - Goals<br />\r\n                        Shots/GP - Shots per Game Played<br />\r\n                        Shoot% - Percentage of shots that score<br />\r\n                        PP.TOI/GP - Power Play Time on Ice per Game Played<br />\r\n                        TOI/GP - Time on Ice per Game Played<br />\r\n                        Goals/GP - Goals per Game Played<br />\r\n                        H/A - Whether the player is playing at home or away<br />\r\n                        Opp.GAA - Opposition Goals Against Average<br />\r\n                    </div>\r\n                </Collapse>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Legend;","import './App.css';\r\nimport paypallogo from './paypal.png';\r\nimport TimmiesApp from './TimmiesApp'\r\nimport Legend from './Legend'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component } from 'react'\r\nimport { instanceOf } from \"prop-types\";\r\nimport { withCookies, Cookies } from \"react-cookie\";\r\n\r\nclass App extends Component {\r\n\r\n    static propTypes = {\r\n        cookies: instanceOf(Cookies).isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showMessage: true\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n    clickHeader() {\r\n        this.setState({ showMessage: false });\r\n    }\r\n\r\n    render() {\r\n        let message = <div>timmies.zorbane.com is moving to <a target=\"_blank\" href=\"https://hockeychallengehelper.com\">https://hockeychallengehelper.com</a>.  Please check it out and provide feedback!  <a href=\"#\" onClick={(e) => this.clickHeader()}>Click to hide...</a></div>\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <link\r\n                    rel=\"stylesheet\"\r\n                    href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n                    integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n                    crossOrigin=\"anonymous\"\r\n                />\r\n                <header className=\"app-title\">\r\n                    Tim Horton's Hockey Challenge Helper\r\n          </header>\r\n                <div>\r\n                    {this.state.showMessage && message}\r\n                    <TimmiesApp cookies={this.props.cookies}/>\r\n                    <Legend />\r\n                    <footer className=\"footer\" >\r\n                        <div>Questions? Suggestions? Find me on <a href={\"//www.twitter.com/Zorbane\"} target=\"_blank\">Twitter</a></div>\r\n                        <div>Buy me Timmies? <a href='https://www.paypal.com/paypalme/zorbane/' target=\"_blank\"><img className=\"paypal-logo\" src={paypallogo} /></a></div>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withCookies(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CookiesProvider } from 'react-cookie'\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <CookiesProvider>\r\n    <App />\r\n  </CookiesProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}