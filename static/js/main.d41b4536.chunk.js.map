{"version":3,"sources":["Player.js","PlayerList.js","PlayerLists.js","TimmiesApp.js","App.js","reportWebVitals.js","index.js"],"names":["Player","props","state","gamesplayed","goals","getGoalsPerGame","bind","getShotsPerGame","getAverageTimeOnIce","getGamesPlayed","getGoals","getOpponentGAA","this","player","nhldata","gamesPlayed","toFixed","shots","opponent","goalsAgainstPerGame","minutes","Math","floor","timeOnIcePerGame","Row","Col","xs","firstName","substring","lastName","position","Component","PlayerList","players","sort","a","b","reverse","map","index","playerTeamAbbr","teamAbbrevs","playerTeam","teams","find","team","teamAbbr","game","games","home","abbr","timmiesAbbr","away","console","log","key","PlayerLists","showList","clickHeader","i","playerLists","length","setState","id","newShowList","show","set","className","href","onClick","e","TimmiesApp","loading","errorMessage","loadTimmies","loadSetData","loadTeamData","getTeamAbbreviation","getTimmiesAbbreviation","axios","post","then","response","data","sets","catch","error","create","baseURL","withCredentials","headers","get","teamData","fullName","teamFullName","selectedTeam","abbreviation","timmiesAbbreviation","trim","jsonPlayer","playerNames","playerName","timmiesName","playerLink","playerId","playerData","newPlayerLists","playerList","src","alt","App","rel","integrity","crossorigin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d41b4536.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gamesplayed: 0,\r\n            goals : 0,\r\n        }\r\n\r\n        this.getGoalsPerGame = this.getGoalsPerGame.bind(this);\r\n        this.getShotsPerGame = this.getShotsPerGame.bind(this);\r\n        this.getAverageTimeOnIce = this.getAverageTimeOnIce.bind(this)\r\n        this.getGamesPlayed = this.getGamesPlayed.bind(this);\r\n        this.getGoals = this.getGoals.bind(this);\r\n\r\n        this.getOpponentGAA = this.getOpponentGAA.bind(this);\r\n    }\r\n\r\n    getGamesPlayed() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.gamesPlayed;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoals() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.goals;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoalsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.goals / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getShotsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.shots / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getOpponentGAA() {\r\n        if (!this.props.opponent) {\r\n            return \"N/A\";\r\n        }\r\n        else {\r\n            return (this.props.opponent.goalsAgainstPerGame.toFixed(2));\r\n        }\r\n    }\r\n\r\n    getAverageTimeOnIce() {\r\n        if (!this.props.player.nhldata) {\r\n            return 0;\r\n        }\r\n        else {\r\n            let minutes = Math.floor(this.props.player.nhldata.timeOnIcePerGame / 60);\r\n            let seconds = Math.floor(this.props.player.nhldata.timeOnIcePerGame - minutes * 60);\r\n            return minutes + \":\" + seconds;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs=\"2\">{this.props.player.firstName.substring(0, 1)}. {this.props.player.lastName}</Col>\r\n                <Col xs=\"1\">{this.props.player.position}</Col>\r\n                <Col xs=\"1\"> {this.getGamesPlayed()}</Col>\r\n                <Col xs=\"1\">{this.getGoals()}</Col>\r\n                <Col xs=\"1\">{this.getShotsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getAverageTimeOnIce()}</Col>\r\n                <Col xs=\"1\">{this.getGoalsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getOpponentGAA()}</Col>\r\n            </Row>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react'\r\nimport Player from './Player'\r\nimport Container from 'react-bootstrap/Row'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nclass PlayerList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col xs=\"2\">Name</Col>\r\n                    <Col xs=\"1\">Pos</Col>\r\n                    <Col xs=\"1\">Games</Col>\r\n                    <Col xs=\"1\">Goals</Col>\r\n                    <Col xs=\"1\">Shots/GP</Col>\r\n                    <Col xs=\"1\">TOI/GP</Col>\r\n                    <Col xs=\"1\">Goals/GP</Col>\r\n                    <Col xs=\"1\">Opp.GAA</Col>\r\n                </Row>\r\n            {\r\n                this.props.players\r\n                    .sort((a, b) => (a.nhldata ? a.nhldata.goals / a.nhldata.gamesPlayed : 0) - (b.nhldata ? b.nhldata.goals / b.nhldata.gamesPlayed : 0))\r\n                    .reverse()\r\n                    .map((player, index) => {\r\n                        let opponent = null;\r\n                        if (player.nhldata) {\r\n                            let playerTeamAbbr = player.nhldata.teamAbbrevs;\r\n                            let playerTeam = this.props.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n                            if (playerTeam) {\r\n                                let game = this.props.games.find(game => game.teams.home.abbr === playerTeam.timmiesAbbr || game.teams.away.abbr === playerTeam.timmiesAbbr);\r\n                                if (game) {\r\n                                    if (game.teams.home.abbr === playerTeamAbbr) {\r\n                                        opponent = this.props.teams.find(team => team.timmiesAbbr === game.teams.away.abbr);\r\n                                    }\r\n                                    else {\r\n                                        opponent = this.props.teams.find(team => team.timmiesAbbr === game.teams.home.abbr);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (!opponent) {\r\n                            if (!player.nhldata) {\r\n                                console.log(\"No NHL data for \" + player.firstName + \" \" + player.lastName);\r\n                            }\r\n                            else {\r\n                                console.log(\"Failed to get opponent for \" + player.firstName + \" \" + player.lastName);\r\n                                console.log(\"Team Abbr: \" + player.nhldata.teamAbbrevs);\r\n                            }\r\n                        }\r\n\r\n                        return (<Player player={player} opponent={opponent} key={player.key}/>)                    \r\n                })\r\n            }\r\n            </div>\r\n                )\r\n    }\r\n}\r\n\r\nexport default PlayerList;","import React, { Component } from 'react'\r\nimport PlayerList from './PlayerList'\r\n\r\nclass PlayerLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showList: []\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //initialize the showList array\r\n        let showList = [];\r\n        for (let i = 0; i < this.props.playerLists.length; i++) {\r\n            showList = [...showList, true];\r\n        }\r\n\r\n        this.setState({ showList });\r\n    }\r\n\r\n\r\n    clickHeader(id) {\r\n        //shallow copy of entire array\r\n        let newShowList = [...this.state.showList];\r\n        let show = newShowList[id - 1];\r\n        newShowList[id - 1] = !show;\r\n        this.setState({ showList : newShowList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {\r\n                        this.props.playerLists.map((set) => {\r\n                            return(\r\n                                <div className=\"player-list\">\r\n                                    <h2 className='list-header' ><a href=\"#\" onClick={(e) => this.clickHeader(set.id)}>List {set.id}</a></h2>\r\n                                    <div>\r\n                                        {this.state.showList[set.id-1] && <PlayerList players={set.players} games={this.props.games} teams={this.props.teams} />}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default PlayerLists;","import React, { Component } from 'react'\r\nimport PlayerLists from './PlayerLists'\r\nimport teamData from './data/teams.json'\r\nimport playerNames from './data/playerNames.json'\r\nimport axios from 'axios'\r\n\r\nclass TimmiesApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }],\r\n            games: null,\r\n            teams : [],\r\n            errorMessage: \"\",\r\n        }\r\n\r\n        this.loadTimmies = this.loadTimmies.bind(this);\r\n        this.loadSetData = this.loadSetData.bind(this);\r\n        this.loadTeamData = this.loadTeamData.bind(this);\r\n        this.getTeamAbbreviation = this.getTeamAbbreviation.bind(this);\r\n        this.getTimmiesAbbreviation = this.getTimmiesAbbreviation.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTimmies();\r\n        this.loadTeamData();\r\n    }\r\n\r\n    loadTimmies() {\r\n        const promise = axios.post(\"https://cors.bridged.cc/http://ec2-54-158-170-220.compute-1.amazonaws.com/api/v1/players\");\r\n        promise.then((response) => {\r\n            this.setState({ loading: false, games: response.data.games });\r\n            this.loadSetData(response.data.sets);\r\n        })\r\n            .catch((error) => {\r\n                this.setState({ errorMessage: \"Something went wrong. Error: \" + error })\r\n            });\r\n    }\r\n\r\n    loadTeamData() {\r\n        let nhlLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/team/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22points%22,%22direction%22:%22DESC%22%7D,%7B%22property%22:%22wins%22,%22direction%22:%22DESC%22%7D%5D&start=0&limit=50&factCayenneExp=gamesPlayed%3E=1&cayenneExp=gameTypeId=2%20and%20seasonId%3C=20202021%20and%20seasonId%3E=20202021\";\r\n        let instance = axios.create({\r\n            baseURL: nhlLink,\r\n            withCredentials: false,\r\n            headers: {\r\n            }\r\n        });\r\n        const promise = instance.get();\r\n        promise.then((response) => {\r\n            //go through each team and set it's abbreviation\r\n            let teamData = response.data.data;\r\n            for (let i = 0; i < teamData.length; i++) {\r\n                let fullName = teamData[i].teamFullName;                \r\n                let abbr = this.getTeamAbbreviation(fullName);\r\n                let timmiesAbbr = this.getTimmiesAbbreviation(fullName);\r\n                \r\n                teamData[i].teamAbbr = abbr;\r\n                if (timmiesAbbr) {\r\n                    teamData[i].timmiesAbbr = timmiesAbbr;\r\n                }\r\n                else {\r\n                    teamData[i].timmiesAbbr = abbr;\r\n                }\r\n            }\r\n            this.setState({ teams: teamData });\r\n\r\n        }).catch((error) => {\r\n                    console.log(\"Unable to get team stats from NHL website. Error: \" + error)\r\n                });\r\n    }\r\n\r\n    getTeamAbbreviation(teamFullName) {      \r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        return selectedTeam ? selectedTeam.abbreviation : \"MTL\"; //if it can't find it, its because of special character in montreal\r\n    }\r\n\r\n    getTimmiesAbbreviation(teamFullName) {\r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        if (selectedTeam) {\r\n            return selectedTeam.timmiesAbbreviation ? selectedTeam.timmiesAbbreviation : \"\";\r\n        }\r\n    }\r\n\r\n\r\n    loadSetData(sets) {\r\n        sets.map((set) => {\r\n            set.players.map((player) => {\r\n                //we want to see if we can find the player in the player.json table\r\n                let firstName = player.firstName.trim();\r\n                let lastName = player.lastName.trim();\r\n                let fullName = firstName + \" \" + lastName;\r\n                let jsonPlayer = playerNames.players.find(playerName => playerName.timmiesName === fullName);\r\n                if (jsonPlayer) {\r\n                    firstName = jsonPlayer.firstName;\r\n                    lastName = jsonPlayer.lastName;\r\n                }\r\n\r\n\r\n                let playerLink = \"https://cors.bridged.cc/https://api.nhle.com/stats/rest/en/skater/summary?cayenneExp=gameTypeId=2%20and%20seasonId%3E=20202021%20and%20skaterFullName%20likeIgnoreCase%20%22%25\" + firstName + \"%20\" + lastName + \"%25%22\";\r\n                let instance = axios.create({\r\n                    baseURL: playerLink,\r\n                    withCredentials: false,\r\n                    headers: {\r\n                    }\r\n                });\r\n                const promise = instance.get();\r\n                promise.then((response) => {\r\n                    const data = response.data.data[0];\r\n                    let key = player.firstName + player.lastName;\r\n                    if (data) {\r\n                        key = data.playerId\r\n                    }\r\n\r\n                    let playerData = { firstName: player.firstName, lastName: player.lastName, position : player.position, key: key, nhldata: data};\r\n\r\n                    //shallow copy of entire array\r\n                    let newPlayerLists = [...this.state.playerLists];\r\n                    let playerList = newPlayerLists[set.id - 1];\r\n                    playerList.players = [...playerList.players, playerData]\r\n                    this.setState({ playerLists: newPlayerLists });\r\n                }).catch((error) => {\r\n                    console.log(\"Player get didn't work for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error)\r\n                });\r\n            });     \r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let display = <div>ok</div>\r\n\r\n        if (this.state.loading) {\r\n            display = <div><img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"loading...\" /></div>\r\n        }\r\n        else if (this.state.errorMessage) {\r\n            display = <div>{this.state.errorMessage}</div>\r\n        }\r\n        else {\r\n            display = <div><PlayerLists playerLists={this.state.playerLists} games={this.state.games} teams={this.state.teams}/></div>\r\n        }\r\n        return (display);\r\n    }\r\n}\r\n\r\nexport default TimmiesApp;","import './App.css';\r\nimport Container from 'react-bootstrap/Container'\r\nimport TimmiesApp from './TimmiesApp'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <link\r\n              rel=\"stylesheet\"\r\n              href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n              integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n              crossorigin=\"anonymous\"\r\n          />\r\n          <header>\r\n            Timmies Helper App  \r\n          </header>\r\n          <div>\r\n              <TimmiesApp/>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}