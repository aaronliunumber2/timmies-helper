{"version":3,"sources":["paypal.png","PlayerList.js","PlayerLists.js","Warnings.js","TimmiesApp.js","Player.js","Legend.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerList","columns","data","useTable","initialState","sortBy","id","desc","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","PlayerLists","props","state","showList","clickHeader","bind","this","playerLists","length","setState","newShowList","show","set","href","onClick","e","Collapse","in","players","playerListColumns","Component","Warnings","playerInjuries","postponedGamesWarning","postponedGames","game","teams","away","team","name","home","gamePK","injuries","injury","player","status","ID","TimmiesApp","zorbaneProxyUrl","bridgedUrl","loading","games","errorMessage","currentSeason","seasonType","currentView","trendGames","trendGamesInput","webInjuries","loadTimmies","loadSetData","loadInjuryData","loadTeamData","getPlayerOpponent","getTeamAbbreviation","getTimmiesAbbreviation","setOverallColumns","setTrendColumns","setTrendGames","adjustTrendGames","getLowerTrendGamesPlayed","getTOIFromPastGames","getValueFromPastGames","getGoalStreak","setCurrentView","setSEasonType","setSeasonType","axios","create","baseURL","withCredentials","get","then","response","catch","error","teamLink","teamData","fullName","teamFullName","abbr","timmiesAbbr","teamAbbr","console","log","timmiesUrl","post","loadNHLGames","timmiesData","timmiesGames","firstTimmiesGame","gameStartTime","Date","startTime","setHours","getHours","date","toISOString","slice","dates","filter","detailedState","sets","firstName","trim","lastName","jsonPlayer","playerNames","find","playerName","timmiesName","basicSearchLink","basicData","key","playerId","playerData","shortName","substring","position","nhldata","teamAbbrevs","opponent","goalsAgainstPerGame","newPlayerLists","playerList","playerIdLink","playerStatsData","people","seasonStats","stats","splits","stat","playerDataTeam","currentTeam","includes","abbreviation","gameLogLink","gameLogSplits","goalsPerGame","goals","gamesPlayed","toFixed","shotsPerGame","shots","statsdata","gamelogData","p","newInjuryList","selectedTeam","timmiesAbbreviation","playerTeamAbbr","playerTeam","skaterFullName","Header","accessor","Cell","src","original","target","value","field","numGames","returnValue","maxGames","gameStats","parseInt","minutes","seconds","toiSplit","split","gameMinutes","gameSeconds","trendSeconds","finalMinutes","finalSeconds","Math","floor","toString","padStart","view","number","newTrendGames","newValue","Number","isInteger","season","display","alt","trendSettings","warnings","Button","variant","onChange","Legend","showLegend","App","rel","integrity","crossOrigin","paypallogo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22c83a7d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/paypal.1bdbe2bb.png\";","import React, { Component } from 'react'\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\n\r\nexport default function PlayerList({ columns, data }) {\r\n\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState:\r\n            {\r\n                sortBy: [\r\n                    {\r\n                        id: \"playerGoalsPerGame\",\r\n                        desc: true,\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        useSortBy\r\n    );\r\n\r\n\r\n\r\n    return(\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                                className={\r\n                                    column.isSorted\r\n                                        ? column.isSortedDesc\r\n                                            ? \"sort-desc\"\r\n                                            : \"sort-asc\"\r\n                                        : \"\"\r\n                                }\r\n                            >{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps([{className: cell.column.className}])}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport { Collapse } from 'react-bootstrap'\r\nimport PlayerList from './PlayerList'\r\n\r\nclass PlayerLists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showList: [],\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        //initialize the showList array\r\n        let showList = [];\r\n        for (let i = 0; i < this.props.playerLists.length; i++) {\r\n            showList = [...showList, true];\r\n        }\r\n\r\n        this.setState({ showList });\r\n    }\r\n\r\n    clickHeader(id) {\r\n        //shallow copy of entire array\r\n        let newShowList = [...this.state.showList];\r\n        let show = newShowList[id - 1];\r\n        newShowList[id - 1] = !show;\r\n        this.setState({ showList : newShowList });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {\r\n\r\n                        this.props.playerLists.map((set) => {\r\n                            return (\r\n                                <div className=\"player-list\" key={set.id}>\r\n                                    <h2 className='list-header' ><a href={\"#set\" + set.id} onClick={(e) => this.clickHeader(set.id)}>List {set.id}</a></h2>\r\n                                    <Collapse in={this.state.showList[set.id - 1]}>\r\n                                        <div className='stats-list' id={\"#set\" + set.id}>\r\n                                            <PlayerList data={set.players} columns={this.props.playerListColumns}/>\r\n                                        </div>\r\n                                    </Collapse>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    \r\nexport default PlayerLists;","import React, { Component } from 'react'\r\n\r\nexport default function Warnings(props) {\r\n\r\n    const postponedGamesWarning = props.postponedGames.map((game) =>\r\n        <div key={game.gamePK}>\r\n            POSTPONED: {game.teams.away.team.name} vs {game.teams.home.team.name}\r\n        </div>\r\n    )\r\n\r\n    let playerInjuries;\r\n    if (props.injuries) {\r\n        playerInjuries = props.injuries.map((injury) => \r\n            <div key={injury.ID}>\r\n                INJURY: {injury.player} - {injury.status} - {injury.injury}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"warnings\">\r\n            {postponedGamesWarning}\r\n            {playerInjuries}\r\n        </div>\r\n        )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport PlayerLists from './PlayerLists'\r\nimport Warnings from './Warnings';\r\nimport teamData from './data/teams.json'\r\nimport playerNames from './data/playerNames.json'\r\nimport axios from 'axios'\r\nimport { Button } from 'react-bootstrap'\r\nimport Player from './Player'\r\n\r\nclass TimmiesApp extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }],\r\n            games: null,\r\n            teams : [],\r\n            errorMessage: \"\",\r\n            currentSeason: \"20202021\",\r\n            seasonType: \"regular\",\r\n            currentView: \"overall\",\r\n            trendGames: 5,\r\n            trendGamesInput : 5,\r\n            playerListColumns: null,\r\n            postponedGames : null,\r\n            playerInjuries: [],\r\n            webInjuries : null,\r\n        }\r\n\r\n        this.loadTimmies = this.loadTimmies.bind(this);\r\n        this.loadSetData = this.loadSetData.bind(this);\r\n        this.loadInjuryData = this.loadInjuryData.bind(this);\r\n        this.loadTeamData = this.loadTeamData.bind(this);\r\n\r\n        this.getPlayerOpponent = this.getPlayerOpponent.bind(this);\r\n        this.getTeamAbbreviation = this.getTeamAbbreviation.bind(this);\r\n        this.getTimmiesAbbreviation = this.getTimmiesAbbreviation.bind(this);\r\n\r\n        this.setOverallColumns = this.setOverallColumns.bind(this);\r\n        this.setTrendColumns = this.setTrendColumns.bind(this);\r\n        this.setTrendGames = this.setTrendGames.bind(this);\r\n\r\n        this.adjustTrendGames = this.adjustTrendGames.bind(this);\r\n        this.getLowerTrendGamesPlayed = this.getLowerTrendGamesPlayed.bind(this);\r\n        this.getTOIFromPastGames = this.getTOIFromPastGames.bind(this);\r\n        this.getValueFromPastGames = this.getValueFromPastGames.bind(this);\r\n        this.getGoalStreak = this.getGoalStreak.bind(this);\r\n\r\n        this.setCurrentView = this.setCurrentView.bind(this);\r\n        this.setSEasonType = this.setSeasonType.bind(this);\r\n\r\n    }\r\n\r\n    zorbaneProxyUrl = \"https://proxy-zorbane.herokuapp.com/\"    \r\n    bridgedUrl = \"https://cors.bridged.cc/\";\r\n\r\n    componentDidMount() {\r\n        this.setOverallColumns();\r\n        this.loadInjuryData();\r\n    }\r\n\r\n    loadInjuryData() {\r\n        const injuryGet = axios.create({\r\n            baseURL: this.zorbaneProxyUrl + \"https://www.rotowire.com/hockey/tables/injury-report.php?team=ALL&pos=ALL\",\r\n            withCredentials: false,\r\n            headers: {\r\n                \"X-Requested-With\" : \"*\",\r\n            }\r\n        });\r\n        const promise = injuryGet.get();\r\n        promise.then((response) => {\r\n            this.setState({ webInjuries: response.data }, () => this.loadTeamData());\r\n        })\r\n            .catch((error) => {\r\n                this.loadTeamData()\r\n            });\r\n    }\r\n\r\n\r\n    loadTeamData() {\r\n        let teamLink = this.zorbaneProxyUrl + \"https://api.nhle.com/stats/rest/en/team/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22points%22,%22direction%22:%22DESC%22%7D,%7B%22property%22:%22wins%22,%22direction%22:%22DESC%22%7D%5D&start=0&limit=50&factCayenneExp=gamesPlayed%3E=1&cayenneExp=gameTypeId=\"\r\n        if (this.state.seasonType === \"playoffs\") {\r\n            teamLink +=  \"3\";\r\n        }\r\n        else {\r\n            teamLink += \"2\";\r\n        }\r\n        teamLink += \"%20and%20seasonId%3C=\" + this.state.currentSeason + \"%20and%20seasonId%3E=\" + this.state.currentSeason;\r\n        let instance = axios.create({\r\n            baseURL: teamLink,\r\n            withCredentials: false,\r\n            headers: {\r\n                \"X-Requested-With\": \"*\",\r\n            }\r\n        });\r\n        const promise = instance.get();\r\n        promise.then((response) => {\r\n\r\n            //go through each team and set it's abbreviation\r\n            let teamData = response.data.data;\r\n            for (let i = 0; i < teamData.length; i++) {\r\n                let fullName = teamData[i].teamFullName;                \r\n                let abbr = this.getTeamAbbreviation(fullName);\r\n                let timmiesAbbr = this.getTimmiesAbbreviation(fullName);\r\n                \r\n                teamData[i].teamAbbr = abbr;\r\n                if (timmiesAbbr) {\r\n                    teamData[i].timmiesAbbr = timmiesAbbr;\r\n                }\r\n                else {\r\n                    teamData[i].timmiesAbbr = abbr;\r\n                }\r\n            }\r\n            //also reset the player list and load timmies\r\n            this.setState({ teams: teamData, playerLists: [{ id: \"1\", players: [] }, { id: \"2\", players: [] }, { id: \"3\", players: [] }] }, this.loadTimmies());\r\n\r\n\r\n\r\n        }).catch((error) => {\r\n            console.log(\"Unable to get team stats from NHL website. Error: \" + error)\r\n            this.setState({ errorMessage: \"Sorry!  Unable to load data from the NHL website.  Please try again later.\" });\r\n                });\r\n    }\r\n\r\n    loadTimmies() {\r\n        let timmiesUrl = this.bridgedUrl + \"http://ec2-52-71-240-52.compute-1.amazonaws.com/api/v1/players\";\r\n        const promise = axios.post(timmiesUrl);\r\n        promise.then((response) => {\r\n            this.loadNHLGames(response.data);\r\n        })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                this.setState({ errorMessage: \"Sorry!  Unable to load Tims Hockey Challenge Data.  Please try again later.\" });\r\n            });\r\n    }\r\n\r\n    loadNHLGames(timmiesData) {\r\n\r\n        let timmiesGames = timmiesData.games;\r\n\r\n        if (timmiesGames.length > 0) {\r\n            let firstTimmiesGame = timmiesGames[0];\r\n            let gameStartTime = new Date(firstTimmiesGame.startTime);\r\n            gameStartTime.setHours(gameStartTime.getHours() - 7); //pacific time\r\n            //let date = gameStartTime.substring(0, gameStartTime.indexOf(\"T\"));\r\n            //let date = gameStartTime.getFullYear() + \"-\" + gameStartTime.get().toString().padStart(2, \"0\") + \"-\" + gameStartTime.getDay().toString().padStart(2, \"0\");\r\n            let date = gameStartTime.toISOString().slice(0, 10);\r\n            const nhlGamesGet = axios.create({\r\n                baseURL: this.zorbaneProxyUrl + \"https://statsapi.web.nhl.com/api/v1/schedule?date=\" + date,\r\n                withCredentials: false,\r\n                headers: {\r\n                    \"X-Requested-With\": \"*\",\r\n                }\r\n            });\r\n            const nhlGamespromise = nhlGamesGet.get();\r\n            nhlGamespromise.then((response) => {\r\n\r\n                //go through and check if there are postponed games\r\n                const games = response.data.dates[0].games;\r\n                let postponedGames = games.filter(game => game.status.detailedState === \"Postponed\");\r\n               \r\n\r\n                this.setState({ loading: false, games: games, postponedGames : postponedGames }, ()=> this.loadSetData(timmiesData.sets));\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    this.setState({ errorMessage: \"Sorry!  Unable to load game day schedule from NHL website.  Please try again later.\" });\r\n                });\r\n        }\r\n        else {\r\n            this.setState({ errorMessage: \"No games today!\" });\r\n        }\r\n    }\r\n\r\n    //this is where all the players data gets loaded through multiple requests\r\n    loadSetData(sets) {\r\n        //empty out the players\r\n        sets.map((set) => {\r\n            set.players.map((player) => {\r\n                //we want to see if we can find the player in the player.json table which means the tims name and nhl name do not match\r\n                let firstName = player.firstName.trim();\r\n                let lastName = player.lastName.trim();\r\n                let fullName = firstName + \" \" + lastName;\r\n                let jsonPlayer = playerNames.players.find(playerName => playerName.timmiesName === fullName);\r\n                if (jsonPlayer) {\r\n                    firstName = jsonPlayer.firstName;\r\n                    lastName = jsonPlayer.lastName;\r\n                    console.log(\"Found timmies player \" + fullName + \". Renamed to \" + firstName + \" \" + lastName);\r\n                }\r\n\r\n\r\n\r\n\r\n                //get basic nhl data\r\n                let basicSearchLink = this.bridgedUrl + \"https://api.nhle.com/stats/rest/en/skater/summary?cayenneExp=gameTypeId=\";\r\n                if (this.state.seasonType === \"playoffs\") {\r\n                    basicSearchLink += \"3\";                    \r\n                }\r\n                else {\r\n                    basicSearchLink += \"2\";\r\n                }                \r\n                basicSearchLink += \"%20and%20seasonId%3E=\" + this.state.currentSeason +\"%20and%20skaterFullName%20likeIgnoreCase%20%22%25\" + firstName + \"%20\" + lastName + \"%25%22\";\r\n                let basicSearch = axios.create({\r\n                    baseURL: basicSearchLink,\r\n                    withCredentials: false,\r\n                    headers: {\r\n                    }\r\n                });\r\n                const basicPromise = basicSearch.get();\r\n                basicPromise.then((response) => {\r\n                    const basicData = response.data.data[0];\r\n                    let key = player.firstName + player.lastName;\r\n                    if (basicData) {\r\n                        key = basicData.playerId;\r\n                    }\r\n                    else {\r\n                        //if we can't find the nhl player just add it but with placeholder fake data\r\n                        let fakenhldata = { teamAbbrevs: \"nhl\" }\r\n                        let fakeopponent = { teamAbbr : \"nhl\", goalsAgainstPerGame : 0}\r\n                        let playerData = { firstName: player.firstName, lastName: player.lastName, shortName: firstName.substring(0, 1) + \". \" + lastName, position: player.position, key: key, nhldata : fakenhldata, opponent : fakeopponent};\r\n\r\n                        //shallow copy of entire array\r\n                        let newPlayerLists = [...this.state.playerLists];\r\n                        let playerList = newPlayerLists[set.id - 1];\r\n                        playerList.players = [...playerList.players, playerData]\r\n                        this.setState({ playerLists: newPlayerLists });\r\n                    }\r\n\r\n\r\n                    let playerIdLink = this.bridgedUrl + \"https://statsapi.web.nhl.com/api/v1/people/\";\r\n                    playerIdLink = playerIdLink + key;\r\n                    playerIdLink = playerIdLink + \"?expand=person.stats&stats=\";\r\n                    if (this.state.seasonType === \"playoffs\") {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeasonPlayoffs\";\r\n                    }\r\n                    else {\r\n                        playerIdLink = playerIdLink + \"statsSingleSeason\";\r\n                    }\r\n                    playerIdLink = playerIdLink + \"&season=\" + this.state.currentSeason;\r\n\r\n                    let playerSearch = axios.create({\r\n                        baseURL: playerIdLink,\r\n                        withCredentials: false,\r\n                        headers: {\r\n                        }\r\n                    });\r\n\r\n                    const playerSearchPromise = playerSearch.get();\r\n                    playerSearchPromise.then((response) => {\r\n                        let playerStatsData = response.data.people[0];\r\n\r\n                        //get the correct stats from the playerStats and that is a new object in player\r\n                        let seasonStats = playerStatsData.stats[0].splits[0].stat;\r\n\r\n\r\n                        let playerDataTeam = playerStatsData.currentTeam.name;\r\n                        //montreal canadiens has an accent, problem finding it in the json\r\n                        if (playerDataTeam.includes(\"Canadiens\")) {\r\n                            playerDataTeam = \"Montreal Canadiens\";\r\n                        }\r\n\r\n                        let team = teamData.teams.find(team => team.fullName === playerDataTeam);\r\n                        if (team != null) {\r\n                            //change the player's team to the current team based on playerstats data (that is more accurate than the summary search)\r\n                            basicData.teamAbbrevs = team.abbreviation;\r\n                        }\r\n                        else {\r\n                            console.log(\"Could not find team \" + playerDataTeam);\r\n                        }\r\n                        \r\n\r\n                        //game log search\r\n                        let gameLogLink = this.bridgedUrl + \"https://statsapi.web.nhl.com/api/v1/people/\"\r\n                        gameLogLink += key;\r\n                        gameLogLink += \"/stats?stats=\";\r\n                        if (this.state.seasonType === \"playoffs\") {\r\n                            gameLogLink += \"playoffGameLog\"\r\n                        }\r\n                        else {\r\n                            gameLogLink += \"gameLog\";\r\n                        }\r\n                        gameLogLink += \"&expand=stats.team & season=\";\r\n                        gameLogLink += this.state.currentSeason;\r\n                        let gameLogSearch = axios.create({\r\n                            baseURL: gameLogLink,\r\n                            withCredentials: false,\r\n                            headers: {\r\n                            }\r\n                        });\r\n\r\n                        const gameLogPromise = gameLogSearch.get();\r\n                        gameLogPromise.then((response) => {\r\n                            let gameLogSplits = response.data.stats[0].splits;\r\n\r\n                            //formatted/custom data\r\n                            //get the opponent from the team list\r\n                            let opponent = null;\r\n                            if (basicData) {\r\n                                opponent = this.getPlayerOpponent(basicData);\r\n                            }\r\n\r\n                            //add goalsPerGame and shotsPerGame to basic data\r\n                            basicData.goalsPerGame = (basicData.goals / basicData.gamesPlayed).toFixed(2);\r\n                            basicData.shotsPerGame = (basicData.shots / basicData.gamesPlayed).toFixed(2);\r\n                            player.fullName = fullName;\r\n                            player.shortName = firstName.substring(0, 1) + \" \" + lastName;\r\n\r\n                            let playerData = {\r\n                                firstName: player.firstName,\r\n                                lastName: player.lastName,\r\n                                fullName: player.firstName + \" \" + player.lastName,\r\n                                shortName: firstName.substring(0, 1) + \". \" + lastName,\r\n                                position: player.position,\r\n                                key: key,\r\n                                id: key,\r\n                                nhldata: basicData,\r\n                                statsdata : seasonStats,\r\n                                gamelogData: gameLogSplits,\r\n                                opponent: opponent,                               \r\n                            };\r\n\r\n                            //shallow copy of entire array\r\n                            let newPlayerLists = [...this.state.playerLists];\r\n                            let playerList = newPlayerLists[set.id - 1];\r\n                            playerList.players = [...playerList.players, playerData]\r\n\r\n                            //see if the player is injured\r\n                            if (this.state.webInjuries && !this.state.playerInjuries.find((p) => p.player === playerData.fullName)) { //it may be null if this call failed and that is OK\r\n                                let injury = this.state.webInjuries.find((injury) => injury.player === playerData.fullName);\r\n                                if (injury) {\r\n                                    playerData.injury = injury;\r\n                                }\r\n                            }\r\n\r\n                            if (playerData.injury) {\r\n                                let newInjuryList = [...this.state.playerInjuries, playerData.injury];\r\n                                this.setState({ playerLists: newPlayerLists, playerInjuries: newInjuryList });\r\n                            }\r\n                            else {\r\n                                this.setState({ playerLists: newPlayerLists });\r\n                            }\r\n                        }).catch((error) => {\r\n                            console.log(\"Game log stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                        });\r\n\r\n                    }).catch((error) => {\r\n                        console.log(\"Player stats failed for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error);\r\n                    });\r\n\r\n                }).catch((error) => {\r\n                    console.log(\"Player search didn't work for \" + player.firstName + \" \" + player.lastName + \". Error: \" + error)\r\n                });\r\n            });\r\n        });\r\n    }    \r\n\r\n    getTeamAbbreviation(teamFullName) {      \r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        return selectedTeam ? selectedTeam.abbreviation : \"MTL\"; //if it can't find it, its because of special character in montreal\r\n    }\r\n    \r\n    getTimmiesAbbreviation(teamFullName) {\r\n        let selectedTeam = teamData.teams.find(team => team.fullName === teamFullName);\r\n        if (selectedTeam) {\r\n            return selectedTeam.timmiesAbbreviation ? selectedTeam.timmiesAbbreviation : \"\";\r\n        }\r\n    }\r\n\r\n    getPlayerOpponent(basicData) {\r\n        let opponent = null;\r\n        if (basicData) {\r\n            let playerTeamAbbr = basicData.teamAbbrevs;\r\n            let playerTeam = this.state.teams.find(team => team.teamAbbr === playerTeamAbbr);\r\n            if (playerTeam) {\r\n\r\n                let game;\r\n                game = this.state.games.find(game => game.teams.home.team.name === playerTeam.teamFullName || game.teams.away.team.name === playerTeam.teamFullName);\r\n                if (game) {\r\n                    if (game.teams.home.team.name === playerTeam.teamFullName) {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.away.team.name);\r\n                    }\r\n                    else {\r\n                        opponent = this.state.teams.find(team => team.teamFullName === game.teams.home.team.name);\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(\"Can't find game for player \" + basicData.skaterFullName);\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Can't find player team for player \" + basicData.skaterFullName);\r\n            }\r\n        }\r\n\r\n        if (!opponent) {\r\n            console.log(\"Failed to get opponent for \" + basicData.skaterFullName);\r\n            console.log(\"Team Abbr: \" + basicData.teamAbbrevs);\r\n            opponent = { teamAbbr: \"nhl\", goalsAgainstPerGame: 0 };\r\n        }\r\n        return opponent;\r\n    }\r\n\r\n    setOverallColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"GP\",\r\n                        id: \"playerGames\",\r\n                        accessor: \"nhldata.gamesPlayed\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: \"nhldata.goals\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: \"nhldata.shotsPerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: \"statsdata.powerPlayTimeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: \"statsdata.timeOnIcePerGame\",\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: \"nhldata.goalsPerGame\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Opp.GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    setTrendColumns() {\r\n        const playerListColumns = [\r\n            {\r\n                Header: \" \",\r\n                id: \"name\",\r\n                columns: [\r\n                    {\r\n                        Header: \"Name\",\r\n                        id: \"playerName\",\r\n                        accessor: \"shortName\",\r\n                        className: \"player-name\",\r\n                        Cell: props =>\r\n                            <div>\r\n                                <img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.nhldata.teamAbbrevs + \".png\"} /> <a target=\"_blank\" href={\"https://www.nhl.com/player/\" + props.row.original.key}>{props.value}</a>\r\n                            </div>,\r\n                    },\r\n                    {\r\n                        Header: \"Pos\",\r\n                        id: \"playerPosition\",\r\n                        accessor: \"position\",\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Games\",\r\n                        id: \"games\",\r\n                        accessor: (row) => this.getLowerTrendGamesPlayed(row, this.state.trendGames),\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"G\",\r\n                        id: \"playerGoals\",\r\n                        accessor: (row) => { return this.getValueFromPastGames(row, \"goals\", this.state.trendGames) },\r\n                        className: \"short-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Shots/GP\",\r\n                        id: \"playerShotsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"shots\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"long-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"PP.TOI/GP\",\r\n                        id: \"playerPPTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"powerPlayTimeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"TOI/GP\",\r\n                        id: \"playerTimePerGame\",\r\n                        accessor: (row) => { return this.getTOIFromPastGames(row, \"timeOnIce\", this.state.trendGames) },\r\n                        className: \"long-stat\"\r\n                    },\r\n                    {\r\n                        Header: \"Goals/GP\",\r\n                        id: \"playerGoalsPerGame\",\r\n                        accessor: (row) => { return (this.getValueFromPastGames(row, \"goals\", this.state.trendGames) / this.getLowerTrendGamesPlayed(row, this.state.trendGames)).toFixed(2) },\r\n                        className: \"short-stat\",\r\n                    },\r\n                    {\r\n                        Header: \"Opp.Season GAA\",\r\n                        id: \"playerOppGAA\",\r\n                        accessor: \"opponent.goalsAgainstPerGame\",\r\n                        Cell: props => <div><img className=\"team-logo\" src={process.env.PUBLIC_URL + \"/assets/logos/\" + props.row.original.opponent.teamAbbr + \".png\"} /> {props.value.toFixed(2)}</div>,\r\n                        className: \"long-stat\"\r\n                    }\r\n\r\n                ]\r\n            }];\r\n\r\n        this.setState({ playerListColumns });\r\n    }\r\n\r\n    getValueFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let returnValue = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames -1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            returnValue += parseInt(gameStats[field]);\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    getTOIFromPastGames(player, field, numGames) {\r\n        const splits = player.gamelogData;\r\n        if (!splits) {\r\n            return 0;\r\n        }\r\n        let minutes = 0;\r\n        let seconds = 0;\r\n        let maxGames = numGames <= splits.length ? numGames : splits.length;\r\n        for (let i = 0; i <= maxGames - 1; i++) {\r\n            const game = splits[i];\r\n            const gameStats = game.stat;\r\n            let toiValue = gameStats[field];\r\n            let toiSplit = toiValue.split(\":\");\r\n            let gameMinutes = toiSplit[0];\r\n            let gameSeconds = toiSplit[1];\r\n\r\n            minutes += parseInt(gameMinutes);\r\n            seconds += parseInt(gameSeconds);\r\n        }\r\n\r\n        let trendOrGamesPlayed = this.getLowerTrendGamesPlayed(player, numGames);\r\n        let totalSeconds = seconds + (minutes * 60);\r\n        let trendSeconds = totalSeconds / trendOrGamesPlayed;\r\n        let finalMinutes = trendSeconds / 60;\r\n        let finalSeconds = trendSeconds % 60;\r\n\r\n        return Math.floor(finalMinutes) + \":\" + Math.floor(finalSeconds).toString().padStart(2, \"0\");\r\n    }\r\n\r\n    getGoalStreak(player) {\r\n        var gamelog = player.gamelogData;\r\n        var streak = 0;\r\n        \r\n        if (gamelog.length > 0) {\r\n            //check the first one to see if they scored or not.  If they did start at 1, if they didn't be negative 1\r\n        }\r\n\r\n        return streak;\r\n    }\r\n\r\n    getGoalsPerGameVsOpponent(player) {\r\n        var opponent = player.opponent;\r\n        var gamelog = player.gamelogData;\r\n        var goals = 0;\r\n        if (gamelog.length > 0) {\r\n\r\n        }\r\n        return goals;\r\n    }\r\n\r\n    setCurrentView(view) {\r\n        if (view != this.state.currentView) {\r\n            this.setState({ currentView: view }, () => { if (view === \"trend\") this.setTrendColumns(); else this.setOverallColumns() });\r\n        }\r\n    }\r\n\r\n    getLowerTrendGamesPlayed(player, numGames) {\r\n        return numGames < player.nhldata.gamesPlayed ? numGames : player.nhldata.gamesPlayed\r\n    }\r\n\r\n    adjustTrendGames(number) {\r\n        let newTrendGames = parseInt(this.state.trendGames) + parseInt(number);\r\n\r\n        if (newTrendGames > 0) {\r\n            this.setTrendGames(newTrendGames);\r\n        }\r\n    }\r\n\r\n    setTrendGames(number) {\r\n        const newValue = parseInt(number);\r\n\r\n        if (Number.isInteger(newValue)) {\r\n            if (newValue > 0) {\r\n                this.setState({ trendGamesInput: newValue, trendGames: newValue }, () => this.setTrendColumns());\r\n            }\r\n        }\r\n        else {\r\n            //special rule for empty, allow it but it won't set the actual trend games state\r\n            if (number === \"\") {\r\n                this.setState({ trendGamesInput: number });\r\n            }\r\n        }\r\n    }\r\n\r\n    setSeasonType(season) {\r\n        if (season != this.state.seasonType) {\r\n            this.setState({ seasonType: season }, () => this.loadTeamData());\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let display = <div>ok</div>\r\n\r\n        if (this.state.errorMessage) {\r\n            display = <div className=\"error-message\">{this.state.errorMessage}</div>\r\n        }\r\n        else if (this.state.loading) {\r\n            display = <div><img src=\"https://miro.medium.com/max/882/1*9EBHIOzhE1XfMYoKz1JcsQ.gif\" alt=\"loading...\" /></div>\r\n        }\r\n        else {\r\n            let trendSettings;\r\n            if (this.state.currentView === \"trend\") {\r\n                trendSettings = <div className=\"trend-settings\"><Button variant=\"light\" onClick={() => this.adjustTrendGames(-1)}>-</Button>Last <input className=\"trend-games\" value={this.state.trendGamesInput} onChange={(e) => { this.setTrendGames(e.target.value); }} /> Games<Button variant=\"light\" onClick={() => this.adjustTrendGames(1)}>+</Button></div>\r\n            }\r\n            let warnings;\r\n            if (this.state.postponedGames || this.state.playerInjuries) {\r\n                warnings = <Warnings postponedGames={this.state.postponedGames} injuries={this.state.playerInjuries}/>\r\n            }\r\n            display =\r\n                <div>\r\n                {warnings}\r\n                <div className=\"settings-buttons\"><Button onClick={(e) => this.setSeasonType(\"regular\")} variant={this.state.seasonType === \"regular\" ? \"dark\" : \"light\"}>Regular Season</Button><Button onClick={(e) => this.setSeasonType(\"playoffs\")} variant={this.state.seasonType === \"playoffs\" ? \"dark\" : \"light\"}>Playoffs</Button></div>\r\n                <div className=\"settings-buttons\"><Button onClick={(e) => this.setCurrentView(\"overall\")} variant={this.state.currentView === \"overall\" ? \"dark\" : \"light\"}>Overall</Button><Button onClick={(e) => this.setCurrentView(\"trend\")} variant={this.state.currentView === \"trend\" ? \"dark\" : \"light\"}>Trend</Button></div>\r\n                {trendSettings}                \r\n                <PlayerLists playerLists={this.state.playerLists} games={this.state.games} teams={this.state.teams} playerListColumns={this.state.playerListColumns} />\r\n                </div>\r\n        }\r\n        return (display);\r\n    }\r\n}\r\n\r\nexport default TimmiesApp;","import React, { Component } from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gamesplayed: 0,\r\n            goals : 0,\r\n        }\r\n\r\n        this.getGoalsPerGame = this.getGoalsPerGame.bind(this);\r\n        this.getShotsPerGame = this.getShotsPerGame.bind(this);\r\n        this.getPPTimeOnIce = this.getPPTimeOnIce.bind(this)\r\n        this.getAverageTimeOnIce = this.getAverageTimeOnIce.bind(this)\r\n        this.getGamesPlayed = this.getGamesPlayed.bind(this);\r\n        this.getGoals = this.getGoals.bind(this);\r\n\r\n        this.getOpponentGAA = this.getOpponentGAA.bind(this);\r\n    }\r\n\r\n    getGamesPlayed() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.gamesPlayed;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoals() {\r\n        if (this.props.player.nhldata) {\r\n            return this.props.player.nhldata.goals;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    getGoalsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.goals / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getShotsPerGame() {\r\n        if (!this.props.player.nhldata || this.props.player.nhldata.gamesPlayed === 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (this.props.player.nhldata.shots / this.props.player.nhldata.gamesPlayed).toFixed(2);\r\n        }\r\n    }\r\n\r\n    getOpponentGAA() {\r\n        if (!this.props.player.opponent) {\r\n            return \"N/A\";\r\n        }\r\n        else {\r\n            return (this.props.player.opponent.goalsAgainstPerGame.toFixed(2));\r\n        }\r\n    }\r\n\r\n    getPPTimeOnIce() {\r\n        if (!this.props.player.statsdata) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return this.props.player.statsdata.powerPlayTimeOnIcePerGame;\r\n        }\r\n    }\r\n\r\n    getAverageTimeOnIce() {\r\n        if (!this.props.player.nhldata) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return this.props.player.statsdata.timeOnIcePerGame;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col className=\"player-name\" xs=\"2\">{this.props.player.firstName.substring(0, 1)}. {this.props.player.lastName}</Col>\r\n                <Col xs=\"1\">{this.props.player.position}</Col>\r\n                <Col xs=\"1\"> {this.getGamesPlayed()}</Col>\r\n                <Col xs=\"1\">{this.getGoals()}</Col>\r\n                <Col xs=\"1\">{this.getShotsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getPPTimeOnIce()}</Col>\r\n                <Col xs=\"1\">{this.getAverageTimeOnIce()}</Col>\r\n                <Col xs=\"1\">{this.getGoalsPerGame()}</Col>\r\n                <Col xs=\"1\">{this.getOpponentGAA()}</Col>\r\n            </Row>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react'\r\nimport { Collapse } from 'react-bootstrap'\r\n\r\nclass Legend extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showLegend: false\r\n        };\r\n\r\n        this.clickHeader = this.clickHeader.bind(this);\r\n    }\r\n\r\n    clickHeader() {\r\n        this.setState({ showLegend: !this.state.showLegend });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"legend\" id=\"legend\">\r\n                <div onClick={(e) => this.clickHeader()}><a href=\"#legend\">Legend</a></div>\r\n                <Collapse in={this.state.showLegend} >\r\n                    <div className=\"legend-content\">\r\n                        Pos - Position<br />\r\n                        GP - Games Played<br />\r\n                        G - Goals<br />\r\n                        Shots/GP - Shots per Game Played<br />\r\n                        PP.TOI/GP - Power Play Time on Ice per Game Played<br />\r\n                        TOI/GP - Time on Ice per Game Played<br />\r\n                        Goals/GP - Goals per Game Played<br />\r\n                        Opp.GAA - Opposition Goals Against Average<br />\r\n                    </div>\r\n                </Collapse>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Legend;","import './App.css';\r\nimport paypallogo from './paypal.png';\r\nimport Container from 'react-bootstrap/Container'\r\nimport TimmiesApp from './TimmiesApp'\r\nimport Legend from './Legend'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <link\r\n              rel=\"stylesheet\"\r\n              href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n              integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n              crossOrigin=\"anonymous\"\r\n          />\r\n          <header className=\"app-title\">\r\n            Tim Horton's Hockey Challenge Helper\r\n          </header>\r\n          <div>\r\n              <TimmiesApp />\r\n              <Legend/ >\r\n              <footer className=\"footer\" >\r\n                  <div>Questions? Suggestions? Find me on <a href={\"//www.twitter.com/Zorbane\"} target=\"_blank\">Twitter</a></div>\r\n                  <div>Buy me Timmies? <a href='https://www.paypal.com/paypalme/zorbane/' target=\"_blank\"><img className=\"paypal-logo\" src={paypallogo}/></a></div>\r\n              </footer>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}